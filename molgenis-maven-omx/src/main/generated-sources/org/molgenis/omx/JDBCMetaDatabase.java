/* File:        org.molgenis.omx/model/JDBCDatabase
 * Copyright:   Inventory 2000-2013, GBIC 2002-2013, all rights reserved
 * Date:        January 2, 2013
 * 
 * generator:   org.molgenis.generators.db.JDBCMetaDatabaseGen 4.0.0-testing
 *
 * THIS FILE HAS BEEN GENERATED, PLEASE DO NOT EDIT!
 */
package org.molgenis.omx;

import java.util.Arrays;
import java.util.Vector;

import org.molgenis.framework.db.DatabaseException;
import org.molgenis.MolgenisFieldTypes;
import org.molgenis.model.elements.Entity;
import org.molgenis.model.elements.Model;
import org.molgenis.model.elements.Field;
import org.molgenis.model.MolgenisModelException;
import org.molgenis.model.MolgenisModelValidator;
import org.molgenis.MolgenisOptions;

/**
 * This class is an in memory representation of the contents of your *_db.xml file
 * Utility of this class is to allow for dynamic querying and/or user interfacing
 * for example within a query tool or a security module.
 */
public class JDBCMetaDatabase extends Model
{
	public JDBCMetaDatabase() throws DatabaseException
	{
		super("org.molgenis.omx");
		try
		{
			//Autoid
			Entity autoid_entity = new Entity("Autoid",this.getDatabase());
			autoid_entity.setSystem(true);
			autoid_entity.setAbstract(true);
			autoid_entity.setDescription("This interface assigns an automatic 'id'.\n\t\t\t\n");
			autoid_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field autoid_id_field = new Field(autoid_entity, "id", MolgenisFieldTypes.getType("int"));
			autoid_id_field.setAuto(true);
			autoid_id_field.setDescription("automatically generated internal id, only for internal use.");
			autoid_id_field.setNillable(false);
			autoid_entity.addField(autoid_id_field);
			autoid_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Identifiable
			Entity identifiable_entity = new Entity("Identifiable",this.getDatabase());
			identifiable_entity.setSystem(true);
			identifiable_entity.setAbstract(true);
			identifiable_entity.setImplements(new String[]{"Autoid"});
			identifiable_entity.setDescription("This interface assigns an automatic 'id', globally\n\t\t\t\tunique identifier\n\t\t\t\t'identifier' field, and possibly not unique 'name'\n\t\t\t\tto all entities that implement it.\n\t\t\t\n");
			identifiable_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field identifiable_identifier_field = new Field(identifiable_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			identifiable_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			identifiable_identifier_field.setNillable(false);
			identifiable_entity.addField(identifiable_identifier_field);
			Field identifiable_name_field = new Field(identifiable_entity, "Name", MolgenisFieldTypes.getType("string"));
			identifiable_name_field.setDescription("human readible name, not necessary unique.");
			identifiable_name_field.setNillable(false);
			identifiable_entity.addField(identifiable_name_field);
			Field identifiable_id_field = new Field(identifiable_entity, "id", MolgenisFieldTypes.getType("int"));
			identifiable_id_field.setAuto(true);
			identifiable_id_field.setDescription("automatically generated internal id, only for internal use.");
			identifiable_id_field.setNillable(false);
			identifiable_entity.addField(identifiable_id_field);
			identifiable_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			identifiable_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//MolgenisEntity
			Entity molgenisEntity_entity = new Entity("MolgenisEntity",this.getDatabase());
			molgenisEntity_entity.setSystem(true);
			molgenisEntity_entity.setAbstract(false);
			molgenisEntity_entity.setImplements(new String[]{"Autoid"});
			molgenisEntity_entity.setDescription("Referenceable catalog of entity names, menus, forms and\n\t\t\t\tplugins.\n\t\t\t\n");
			molgenisEntity_entity.setXrefLabels(Arrays.asList(new String[]{"className"}));
			Field molgenisEntity_name_field = new Field(molgenisEntity_entity, "name", MolgenisFieldTypes.getType("string"));
			molgenisEntity_name_field.setDescription("Name of the entity");
			molgenisEntity_name_field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_name_field);
			Field molgenisEntity_type__field = new Field(molgenisEntity_entity, "type_", MolgenisFieldTypes.getType("string"));
			molgenisEntity_type__field.setDescription("Type of the entity");
			molgenisEntity_type__field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_type__field);
			Field molgenisEntity_className_field = new Field(molgenisEntity_entity, "className", MolgenisFieldTypes.getType("string"));
			molgenisEntity_className_field.setDescription("Full name of the entity");
			molgenisEntity_className_field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_className_field);
			Field molgenisEntity_id_field = new Field(molgenisEntity_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisEntity_id_field.setAuto(true);
			molgenisEntity_id_field.setDescription("automatically generated internal id, only for internal use.");
			molgenisEntity_id_field.setNillable(false);
			molgenisEntity_entity.addField(molgenisEntity_id_field);
			molgenisEntity_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisEntity_entity.addKey(Arrays.asList(new String[]{"className"}),false,"");
			molgenisEntity_entity.addKey(Arrays.asList(new String[]{"name","type_"}),false,"");
			
			//MolgenisFile
			Entity molgenisFile_entity = new Entity("MolgenisFile",this.getDatabase());
			molgenisFile_entity.setSystem(false);
			molgenisFile_entity.setAbstract(false);
			molgenisFile_entity.setImplements(new String[]{"Identifiable"});
			molgenisFile_entity.setDescription("\n\t\t\t\tHelper entity to deal with files. Has a decorator to regulate\n\t\t\t\tstorage and coupling to an Entity. Do not make abstract because of\n\t\t\t\tsubtyping. This means the names of the subclasses will be used to\n\t\t\t\tdistinguish MolgenisFiles and place them in the correct folders.\n\t\t\t\n");
			molgenisFile_entity.setXrefLabels(Arrays.asList(new String[]{"Name"}));
			Field molgenisFile_extension_field = new Field(molgenisFile_entity, "Extension", MolgenisFieldTypes.getType("string"));
			molgenisFile_extension_field.setDescription("The file extension. This will be mapped to MIME type at runtime. For example, a type 'png' will be served out as 'image/png'.");
			molgenisFile_extension_field.setNillable(false);
			molgenisFile_entity.addField(molgenisFile_extension_field);
			Field molgenisFile_identifier_field = new Field(molgenisFile_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			molgenisFile_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			molgenisFile_identifier_field.setNillable(false);
			molgenisFile_entity.addField(molgenisFile_identifier_field);
			Field molgenisFile_name_field = new Field(molgenisFile_entity, "Name", MolgenisFieldTypes.getType("string"));
			molgenisFile_name_field.setDescription("human readible name, not necessary unique.");
			molgenisFile_name_field.setNillable(false);
			molgenisFile_entity.addField(molgenisFile_name_field);
			Field molgenisFile_id_field = new Field(molgenisFile_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisFile_id_field.setAuto(true);
			molgenisFile_id_field.setDescription("automatically generated internal id, only for internal use.");
			molgenisFile_id_field.setNillable(false);
			molgenisFile_entity.addField(molgenisFile_id_field);
			molgenisFile_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisFile_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			molgenisFile_entity.addKey(Arrays.asList(new String[]{"Name"}),false,"");
			
			//RuntimeProperty
			Entity runtimeProperty_entity = new Entity("RuntimeProperty",this.getDatabase());
			runtimeProperty_entity.setSystem(false);
			runtimeProperty_entity.setAbstract(false);
			runtimeProperty_entity.setImplements(new String[]{"Identifiable"});
			runtimeProperty_entity.setDescription("");
			runtimeProperty_entity.setXrefLabels(Arrays.asList(new String[]{"Name"}));
			Field runtimeProperty_value_field = new Field(runtimeProperty_entity, "Value", MolgenisFieldTypes.getType("string"));
			runtimeProperty_value_field.setDescription("Value");
			runtimeProperty_value_field.setNillable(false);
			runtimeProperty_entity.addField(runtimeProperty_value_field);
			Field runtimeProperty_identifier_field = new Field(runtimeProperty_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			runtimeProperty_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			runtimeProperty_identifier_field.setNillable(false);
			runtimeProperty_entity.addField(runtimeProperty_identifier_field);
			Field runtimeProperty_name_field = new Field(runtimeProperty_entity, "Name", MolgenisFieldTypes.getType("string"));
			runtimeProperty_name_field.setDescription("human readible name, not necessary unique.");
			runtimeProperty_name_field.setNillable(false);
			runtimeProperty_entity.addField(runtimeProperty_name_field);
			Field runtimeProperty_id_field = new Field(runtimeProperty_entity, "id", MolgenisFieldTypes.getType("int"));
			runtimeProperty_id_field.setAuto(true);
			runtimeProperty_id_field.setDescription("automatically generated internal id, only for internal use.");
			runtimeProperty_id_field.setNillable(false);
			runtimeProperty_entity.addField(runtimeProperty_id_field);
			runtimeProperty_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			runtimeProperty_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			runtimeProperty_entity.addKey(Arrays.asList(new String[]{"Name"}),false,"");
			
			//MolgenisRole
			Entity molgenisRole_entity = new Entity("MolgenisRole",this.getDatabase());
			molgenisRole_entity.setSystem(true);
			molgenisRole_entity.setAbstract(false);
			molgenisRole_entity.setImplements(new String[]{"Autoid"});
			molgenisRole_entity.setDescription("");
			molgenisRole_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field molgenisRole_name_field = new Field(molgenisRole_entity, "name", MolgenisFieldTypes.getType("string"));
			molgenisRole_name_field.setDescription("name");
			molgenisRole_name_field.setNillable(false);
			molgenisRole_entity.addField(molgenisRole_name_field);
			Field molgenisRole_id_field = new Field(molgenisRole_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisRole_id_field.setAuto(true);
			molgenisRole_id_field.setDescription("automatically generated internal id, only for internal use.");
			molgenisRole_id_field.setNillable(false);
			molgenisRole_entity.addField(molgenisRole_id_field);
			molgenisRole_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisRole_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//MolgenisGroup
			Entity molgenisGroup_entity = new Entity("MolgenisGroup",this.getDatabase());
			molgenisGroup_entity.setSystem(true);
			molgenisGroup_entity.setAbstract(false);
			molgenisGroup_entity.setParents(new String[]{"MolgenisRole"});
			molgenisGroup_entity.setDescription("");
			molgenisGroup_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field molgenisGroup_id_field = new Field(molgenisGroup_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisGroup_id_field.setAuto(true);
			molgenisGroup_id_field.setDescription("automatically generated internal id, only for internal use.");
			molgenisGroup_id_field.setNillable(false);
			molgenisGroup_entity.addField(molgenisGroup_id_field);
			molgenisGroup_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//MolgenisUser
			Entity molgenisUser_entity = new Entity("MolgenisUser",this.getDatabase());
			molgenisUser_entity.setSystem(true);
			molgenisUser_entity.setAbstract(false);
			molgenisUser_entity.setImplements(new String[]{"Autoid"});
			molgenisUser_entity.setDescription("Anyone who can login\n");
			molgenisUser_entity.setXrefLabels(Arrays.asList(new String[]{"username"}));
			Field molgenisUser_username_field = new Field(molgenisUser_entity, "username", MolgenisFieldTypes.getType("string"));
			molgenisUser_username_field.setDescription("username");
			molgenisUser_username_field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_username_field);
			Field molgenisUser_password__field = new Field(molgenisUser_entity, "password_", MolgenisFieldTypes.getType("string"));
			molgenisUser_password__field.setDevaultValue("secret");
			molgenisUser_password__field.setDescription("big fixme: password type");
			molgenisUser_password__field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_password__field);
			Field molgenisUser_activationCode_field = new Field(molgenisUser_entity, "activationCode", MolgenisFieldTypes.getType("string"));
			molgenisUser_activationCode_field.setDescription("Used as alternative authentication mechanism to verify user email and/or if user has lost password.");
			molgenisUser_activationCode_field.setNillable(true);
			molgenisUser_entity.addField(molgenisUser_activationCode_field);
			Field molgenisUser_active_field = new Field(molgenisUser_entity, "active", MolgenisFieldTypes.getType("bool"));
			molgenisUser_active_field.setDevaultValue("false");
			molgenisUser_active_field.setDescription("Boolean to indicate if this account can be used to login");
			molgenisUser_active_field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_active_field);
			Field molgenisUser_superuser_field = new Field(molgenisUser_entity, "superuser", MolgenisFieldTypes.getType("bool"));
			molgenisUser_superuser_field.setDevaultValue("false");
			molgenisUser_superuser_field.setDescription("superuser");
			molgenisUser_superuser_field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_superuser_field);
			Field molgenisUser_id_field = new Field(molgenisUser_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisUser_id_field.setAuto(true);
			molgenisUser_id_field.setDescription("automatically generated internal id, only for internal use.");
			molgenisUser_id_field.setNillable(false);
			molgenisUser_entity.addField(molgenisUser_id_field);
			molgenisUser_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisUser_entity.addKey(Arrays.asList(new String[]{"username"}),false,"");
			
			//MolgenisRoleGroupLink
			Entity molgenisRoleGroupLink_entity = new Entity("MolgenisRoleGroupLink",this.getDatabase());
			molgenisRoleGroupLink_entity.setSystem(true);
			molgenisRoleGroupLink_entity.setAbstract(false);
			molgenisRoleGroupLink_entity.setImplements(new String[]{"Identifiable"});
			molgenisRoleGroupLink_entity.setDescription("");
			molgenisRoleGroupLink_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field molgenisRoleGroupLink_group__field = new Field(molgenisRoleGroupLink_entity, "group_", MolgenisFieldTypes.getType("xref"));
			molgenisRoleGroupLink_group__field.setDescription("group_");
			molgenisRoleGroupLink_group__field.setNillable(false);
			molgenisRoleGroupLink_group__field.setXRefVariables("MolgenisGroup", "id",Arrays.asList(new String[]{"name"}));
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_group__field);
			Field molgenisRoleGroupLink_role__field = new Field(molgenisRoleGroupLink_entity, "role_", MolgenisFieldTypes.getType("xref"));
			molgenisRoleGroupLink_role__field.setDescription("role_");
			molgenisRoleGroupLink_role__field.setNillable(false);
			molgenisRoleGroupLink_role__field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_role__field);
			Field molgenisRoleGroupLink_identifier_field = new Field(molgenisRoleGroupLink_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			molgenisRoleGroupLink_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			molgenisRoleGroupLink_identifier_field.setNillable(false);
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_identifier_field);
			Field molgenisRoleGroupLink_name_field = new Field(molgenisRoleGroupLink_entity, "Name", MolgenisFieldTypes.getType("string"));
			molgenisRoleGroupLink_name_field.setDescription("human readible name, not necessary unique.");
			molgenisRoleGroupLink_name_field.setNillable(false);
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_name_field);
			Field molgenisRoleGroupLink_id_field = new Field(molgenisRoleGroupLink_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisRoleGroupLink_id_field.setAuto(true);
			molgenisRoleGroupLink_id_field.setDescription("automatically generated internal id, only for internal use.");
			molgenisRoleGroupLink_id_field.setNillable(false);
			molgenisRoleGroupLink_entity.addField(molgenisRoleGroupLink_id_field);
			molgenisRoleGroupLink_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			molgenisRoleGroupLink_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//MolgenisPermission
			Entity molgenisPermission_entity = new Entity("MolgenisPermission",this.getDatabase());
			molgenisPermission_entity.setSystem(true);
			molgenisPermission_entity.setAbstract(false);
			molgenisPermission_entity.setImplements(new String[]{"Autoid"});
			molgenisPermission_entity.setDescription("");
			molgenisPermission_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field molgenisPermission_role__field = new Field(molgenisPermission_entity, "role_", MolgenisFieldTypes.getType("xref"));
			molgenisPermission_role__field.setDescription("role_");
			molgenisPermission_role__field.setNillable(false);
			molgenisPermission_role__field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			molgenisPermission_entity.addField(molgenisPermission_role__field);
			Field molgenisPermission_entity_field = new Field(molgenisPermission_entity, "entity", MolgenisFieldTypes.getType("xref"));
			molgenisPermission_entity_field.setDescription("entity");
			molgenisPermission_entity_field.setNillable(false);
			molgenisPermission_entity_field.setXRefVariables("MolgenisEntity", "id",Arrays.asList(new String[]{"className"}));
			molgenisPermission_entity.addField(molgenisPermission_entity_field);
			Field molgenisPermission_permission_field = new Field(molgenisPermission_entity, "permission", MolgenisFieldTypes.getType("enum"));
			Vector<String> molgenisPermission_permission_field_enumoptions = new Vector<String>();
			molgenisPermission_permission_field_enumoptions.add("read");
			molgenisPermission_permission_field_enumoptions.add("write");
			molgenisPermission_permission_field_enumoptions.add("own");
			molgenisPermission_permission_field.setEnumOptions(molgenisPermission_permission_field_enumoptions);
			molgenisPermission_permission_field.setDescription("permission");
			molgenisPermission_permission_field.setNillable(false);
			molgenisPermission_entity.addField(molgenisPermission_permission_field);
			Field molgenisPermission_id_field = new Field(molgenisPermission_entity, "id", MolgenisFieldTypes.getType("int"));
			molgenisPermission_id_field.setAuto(true);
			molgenisPermission_id_field.setDescription("automatically generated internal id, only for internal use.");
			molgenisPermission_id_field.setNillable(false);
			molgenisPermission_entity.addField(molgenisPermission_id_field);
			molgenisPermission_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Authorizable
			Entity authorizable_entity = new Entity("Authorizable",this.getDatabase());
			authorizable_entity.setSystem(false);
			authorizable_entity.setAbstract(true);
			authorizable_entity.setDescription("Interface for row level security\n");
			Field authorizable_canRead_field = new Field(authorizable_entity, "canRead", MolgenisFieldTypes.getType("xref"));
			authorizable_canRead_field.setDescription("canRead");
			authorizable_canRead_field.setNillable(true);
			authorizable_canRead_field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			authorizable_entity.addField(authorizable_canRead_field);
			Field authorizable_canWrite_field = new Field(authorizable_entity, "canWrite", MolgenisFieldTypes.getType("xref"));
			authorizable_canWrite_field.setDescription("canWrite");
			authorizable_canWrite_field.setNillable(true);
			authorizable_canWrite_field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			authorizable_entity.addField(authorizable_canWrite_field);
			Field authorizable_owns_field = new Field(authorizable_entity, "owns", MolgenisFieldTypes.getType("xref"));
			authorizable_owns_field.setDescription("owns");
			authorizable_owns_field.setNillable(false);
			authorizable_owns_field.setXRefVariables("MolgenisRole", "id",Arrays.asList(new String[]{"name"}));
			authorizable_entity.addField(authorizable_owns_field);
			
			//Characteristic
			Entity characteristic_entity = new Entity("Characteristic",this.getDatabase());
			characteristic_entity.setSystem(false);
			characteristic_entity.setAbstract(false);
			characteristic_entity.setImplements(new String[]{"Identifiable"});
			characteristic_entity.setDescription(" Characteristics are yes-no\n\t\t\t\tstatements about things in\n\t\t\t\tthe world. These can be used as part of an observation, as\n\t\t\t\tparameter\n\t\t\t\tof ObservableFeature ('measuredCharacteristic'). For\n\t\t\t\texample: 'What\n\t\t\t\tis allele of [Marker]', here the [Marker] is a\n\t\t\t\tcharacteristic. Also,\n\t\t\t\tCharacteristics can be used as target of\n\t\t\t\tobservation. Typical\n\t\t\t\texamples are 'Individual' or 'Panel'. But also\n\t\t\t\t'Marker' can be an\n\t\t\t\tTarget when asked the question 'QTL p-value for\n\t\t\t\t[phenotype]': here\n\t\t\t\tboth target and feature are characteristic, for\n\t\t\t\texample 'leave count'\n\t\t\t\t(phenotype characteristic) and 'PVV4' (marker\n\t\t\t\tcharacteristic).\n\t\t\t\n");
			characteristic_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field characteristic_description_field = new Field(characteristic_entity, "description", MolgenisFieldTypes.getType("text"));
			characteristic_description_field.setDescription("(Optional) Rudimentary meta data about the observable feature. Use of ontology       terms references to establish unambigious descriptions is recommended");
			characteristic_description_field.setNillable(true);
			characteristic_entity.addField(characteristic_description_field);
			Field characteristic_identifier_field = new Field(characteristic_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			characteristic_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			characteristic_identifier_field.setNillable(false);
			characteristic_entity.addField(characteristic_identifier_field);
			Field characteristic_name_field = new Field(characteristic_entity, "Name", MolgenisFieldTypes.getType("string"));
			characteristic_name_field.setDescription("human readible name, not necessary unique.");
			characteristic_name_field.setNillable(false);
			characteristic_entity.addField(characteristic_name_field);
			Field characteristic_id_field = new Field(characteristic_entity, "id", MolgenisFieldTypes.getType("int"));
			characteristic_id_field.setAuto(true);
			characteristic_id_field.setDescription("automatically generated internal id, only for internal use.");
			characteristic_id_field.setNillable(false);
			characteristic_entity.addField(characteristic_id_field);
			characteristic_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			characteristic_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//ObservationTarget
			Entity observationTarget_entity = new Entity("ObservationTarget",this.getDatabase());
			observationTarget_entity.setSystem(false);
			observationTarget_entity.setAbstract(false);
			observationTarget_entity.setParents(new String[]{"Characteristic"});
			observationTarget_entity.setDescription(" ObservationTarget defines subjects of\n\t\t\t\tobservation, such\n\t\t\t\tas Individual, Panel, Sample, etc. For instance: 'target 1' IS A\n\t\t\t\t'Individual'.\n\t\t\t\n");
			observationTarget_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field observationTarget_id_field = new Field(observationTarget_entity, "id", MolgenisFieldTypes.getType("int"));
			observationTarget_id_field.setAuto(true);
			observationTarget_id_field.setDescription("automatically generated internal id, only for internal use.");
			observationTarget_id_field.setNillable(false);
			observationTarget_entity.addField(observationTarget_id_field);
			observationTarget_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Individual
			Entity individual_entity = new Entity("Individual",this.getDatabase());
			individual_entity.setSystem(false);
			individual_entity.setAbstract(false);
			individual_entity.setParents(new String[]{"ObservationTarget"});
			individual_entity.setDescription(" The Individuals class defines the subjects that are\n\t\t\t\tused\n\t\t\t\tas observation target. The Individual class maps to\n\t\t\t\tXGAP:Individual\n\t\t\t\tand PaGE:Individual. Groups of individuals can be\n\t\t\t\tdefined via\n\t\t\t\tPanel.\n\t\t\t\n");
			individual_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field individual_mother_field = new Field(individual_entity, "Mother", MolgenisFieldTypes.getType("xref"));
			individual_mother_field.setDescription("Refers to the mother of the individual.");
			individual_mother_field.setNillable(true);
			individual_mother_field.setXRefVariables("Individual", "id",Arrays.asList(new String[]{"Identifier"}));
			individual_entity.addField(individual_mother_field);
			Field individual_father_field = new Field(individual_entity, "Father", MolgenisFieldTypes.getType("xref"));
			individual_father_field.setDescription("Refers to the father of the individual.");
			individual_father_field.setNillable(true);
			individual_father_field.setXRefVariables("Individual", "id",Arrays.asList(new String[]{"Identifier"}));
			individual_entity.addField(individual_father_field);
			Field individual_id_field = new Field(individual_entity, "id", MolgenisFieldTypes.getType("int"));
			individual_id_field.setAuto(true);
			individual_id_field.setDescription("automatically generated internal id, only for internal use.");
			individual_id_field.setNillable(false);
			individual_entity.addField(individual_id_field);
			individual_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Ontology
			Entity ontology_entity = new Entity("Ontology",this.getDatabase());
			ontology_entity.setSystem(false);
			ontology_entity.setAbstract(false);
			ontology_entity.setImplements(new String[]{"Identifiable"});
			ontology_entity.setDescription(" Ontology defines a reference to an ontology or\n\t\t\t\tcontrolled vocabulary from which well-defined and stable (ontology)\n\t\t\t\tterms can be obtained. Each Ontology should have a unique identifer,\n\t\t\t\tfor instance: Gene Ontology, Mammalian Phenotype, Human Phenotype\n\t\t\t\tOntology, Unified Medical Language System, Medical Subject Headings,\n\t\t\t\tetc. Also a abbreviation is required, for instance: GO, MP, HPO,\n\t\t\t\tUMLS, MeSH, etc. Use of existing ontologies/vocabularies is\n\t\t\t\trecommended to harmonize phenotypic feature and value descriptions.\n\t\t\t\tBut one can also create a 'local' Ontology. The Ontology class maps\n\t\t\t\tto FuGE::Ontology, MAGE-TAB::TermSourceREF.\n\t\t\t\n");
			ontology_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field ontology_ontologyAccession_field = new Field(ontology_entity, "ontologyAccession", MolgenisFieldTypes.getType("string"));
			ontology_ontologyAccession_field.setDescription("A accession that uniquely identifies the ontology (typically an acronym). E.g. GO, MeSH, HPO.");
			ontology_ontologyAccession_field.setNillable(true);
			ontology_entity.addField(ontology_ontologyAccession_field);
			Field ontology_ontologyURI_field = new Field(ontology_entity, "ontologyURI", MolgenisFieldTypes.getType("hyperlink"));
			ontology_ontologyURI_field.setDescription("(Optional) A URI that references the location of the ontology.");
			ontology_ontologyURI_field.setNillable(true);
			ontology_entity.addField(ontology_ontologyURI_field);
			Field ontology_identifier_field = new Field(ontology_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			ontology_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			ontology_identifier_field.setNillable(false);
			ontology_entity.addField(ontology_identifier_field);
			Field ontology_name_field = new Field(ontology_entity, "Name", MolgenisFieldTypes.getType("string"));
			ontology_name_field.setDescription("human readible name, not necessary unique.");
			ontology_name_field.setNillable(false);
			ontology_entity.addField(ontology_name_field);
			Field ontology_id_field = new Field(ontology_entity, "id", MolgenisFieldTypes.getType("int"));
			ontology_id_field.setAuto(true);
			ontology_id_field.setDescription("automatically generated internal id, only for internal use.");
			ontology_id_field.setNillable(false);
			ontology_entity.addField(ontology_id_field);
			ontology_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			ontology_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//Species
			Entity species_entity = new Entity("Species",this.getDatabase());
			species_entity.setSystem(false);
			species_entity.setAbstract(false);
			species_entity.setParents(new String[]{"OntologyTerm"});
			species_entity.setDescription("Ontology terms for species. E.g. Arabidopsis thaliana.\n\t\t\t\tDISCUSSION: should we avoid subclasses of OntologyTerm and instead\n\t\t\t\tmake a 'tag' filter on terms so we can make pulldowns context\n\t\t\t\tdependent (e.g. to only show particular subqueries of ontologies).\n\t\t\t\n");
			species_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field species_id_field = new Field(species_entity, "id", MolgenisFieldTypes.getType("int"));
			species_id_field.setAuto(true);
			species_id_field.setDescription("automatically generated internal id, only for internal use.");
			species_id_field.setNillable(false);
			species_entity.addField(species_id_field);
			species_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//OntologyTerm
			Entity ontologyTerm_entity = new Entity("OntologyTerm",this.getDatabase());
			ontologyTerm_entity.setSystem(false);
			ontologyTerm_entity.setAbstract(false);
			ontologyTerm_entity.setImplements(new String[]{"Identifiable"});
			ontologyTerm_entity.setDescription("\n\t\t\t\tOntologyTerm defines a single entry (term) from an\n\t\t\t\tontology or a controlled vocabulary (defined by Ontology). The\n\t\t\t\tidentifier is the ontology term is unique. E.g. 'NCI:Antigen Gene'.\n\t\t\t\tOther data entities can reference to this OntologyTerm to harmonize\n\t\t\t\tnaming of concepts. If no suitable ontology term exists then one can\n\t\t\t\tdefine new terms locally (in which case there is no formal accession\n\t\t\t\tfor the term limiting its use for cross-Investigation queries).\n\t\t\t\n");
			ontologyTerm_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field ontologyTerm_ontology_field = new Field(ontologyTerm_entity, "ontology", MolgenisFieldTypes.getType("xref"));
			ontologyTerm_ontology_field.setDescription("(Optional) The source ontology or controlled vocabulary list that ontology terms have been obtained from.");
			ontologyTerm_ontology_field.setNillable(true);
			ontologyTerm_ontology_field.setXRefVariables("Ontology", "id",Arrays.asList(new String[]{"Identifier"}));
			ontologyTerm_entity.addField(ontologyTerm_ontology_field);
			Field ontologyTerm_termAccession_field = new Field(ontologyTerm_entity, "termAccession", MolgenisFieldTypes.getType("string"));
			ontologyTerm_termAccession_field.setDescription("(Optional) The accession number assigned to the ontology term in its source ontology. If empty it is assumed to be a locally defined term.");
			ontologyTerm_termAccession_field.setNillable(true);
			ontologyTerm_entity.addField(ontologyTerm_termAccession_field);
			Field ontologyTerm_definition_field = new Field(ontologyTerm_entity, "definition", MolgenisFieldTypes.getType("string"));
			ontologyTerm_definition_field.setDescription("(Optional) The definition of the term.");
			ontologyTerm_definition_field.setNillable(true);
			ontologyTerm_entity.addField(ontologyTerm_definition_field);
			Field ontologyTerm_identifier_field = new Field(ontologyTerm_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			ontologyTerm_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			ontologyTerm_identifier_field.setNillable(false);
			ontologyTerm_entity.addField(ontologyTerm_identifier_field);
			Field ontologyTerm_name_field = new Field(ontologyTerm_entity, "Name", MolgenisFieldTypes.getType("string"));
			ontologyTerm_name_field.setDescription("human readible name, not necessary unique.");
			ontologyTerm_name_field.setNillable(false);
			ontologyTerm_entity.addField(ontologyTerm_name_field);
			Field ontologyTerm_id_field = new Field(ontologyTerm_entity, "id", MolgenisFieldTypes.getType("int"));
			ontologyTerm_id_field.setAuto(true);
			ontologyTerm_id_field.setDescription("automatically generated internal id, only for internal use.");
			ontologyTerm_id_field.setNillable(false);
			ontologyTerm_entity.addField(ontologyTerm_id_field);
			ontologyTerm_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			ontologyTerm_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			ontologyTerm_entity.addKey(Arrays.asList(new String[]{"ontology","termAccession"}),false,"");
			
			//Accession
			Entity accession_entity = new Entity("Accession",this.getDatabase());
			accession_entity.setSystem(false);
			accession_entity.setAbstract(false);
			accession_entity.setParents(new String[]{"OntologyTerm"});
			accession_entity.setDescription("\n\t\t\t\tAn external identifier for an annotation. For example:\n\t\t\t\tname='R13H8.1', ontology='ensembl' or name='WBgene00000912',\n\t\t\t\tontology='wormbase'.\n\t\t\t\n");
			accession_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field accession_id_field = new Field(accession_entity, "id", MolgenisFieldTypes.getType("int"));
			accession_id_field.setAuto(true);
			accession_id_field.setDescription("automatically generated internal id, only for internal use.");
			accession_id_field.setNillable(false);
			accession_entity.addField(accession_id_field);
			accession_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//ObservableFeature
			Entity observableFeature_entity = new Entity("ObservableFeature",this.getDatabase());
			observableFeature_entity.setSystem(false);
			observableFeature_entity.setAbstract(false);
			observableFeature_entity.setParents(new String[]{"Characteristic"});
			observableFeature_entity.setDescription("\n\t\t\t\tObservableFeature defines anything that can be observed.\n\t\t\t\t<p/>\n\t\t\t\tIn other words, ObservableFeature are the\n\t\t\t\tquestions asked, e.g. 'What\n\t\t\t\tis Height?', 'What is Systolic blood\n\t\t\t\tpressure?', or 'Has blue eyes?'.\n\t\t\t\t<p/>\n\t\t\t\tSome questions may\n\t\t\t\tbe repeated for multiple characteristics. For\n\t\t\t\texample 'What is [MarkerAllele]\n\t\t\t\tobserved?' can be applied to all\n\t\t\t\telements of a MarkerSet, and 'What\n\t\t\t\tis [medicin codes] uses' can be\n\t\t\t\tapplied to a set of Medicine codes. This can be specified using the\n\t\t\t\tmeasuredCharacteristic field.\n\t\t\t\t<p/>\n\t\t\t\tThe identifier of ObservableFeature is globally\n\t\t\t\tunique. It is\n\t\t\t\trecommended that\n\t\t\t\teach\n\t\t\t\tObservableFeature is named\n\t\t\t\taccording to a\n\t\t\t\twell-defined ontology\n\t\t\t\tterm or database accession.\n\t\t\t\n");
			observableFeature_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field observableFeature_unit_field = new Field(observableFeature_entity, "unit", MolgenisFieldTypes.getType("xref"));
			observableFeature_unit_field.setDescription("(Optional) Reference to the well-defined measurement unit used to observe this feature       (if feature is that concrete). E.g. mmHg");
			observableFeature_unit_field.setNillable(true);
			observableFeature_unit_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			observableFeature_entity.addField(observableFeature_unit_field);
			Field observableFeature_dataType_field = new Field(observableFeature_entity, "dataType", MolgenisFieldTypes.getType("enum"));
			Vector<String> observableFeature_dataType_field_enumoptions = new Vector<String>();
			observableFeature_dataType_field_enumoptions.add("xref");
			observableFeature_dataType_field_enumoptions.add("string");
			observableFeature_dataType_field_enumoptions.add("categorical");
			observableFeature_dataType_field_enumoptions.add("nominal");
			observableFeature_dataType_field_enumoptions.add("ordinal");
			observableFeature_dataType_field_enumoptions.add("date");
			observableFeature_dataType_field_enumoptions.add("datetime");
			observableFeature_dataType_field_enumoptions.add("int");
			observableFeature_dataType_field_enumoptions.add("code");
			observableFeature_dataType_field_enumoptions.add("image");
			observableFeature_dataType_field_enumoptions.add("decimal");
			observableFeature_dataType_field_enumoptions.add("bool");
			observableFeature_dataType_field_enumoptions.add("file");
			observableFeature_dataType_field_enumoptions.add("log");
			observableFeature_dataType_field_enumoptions.add("data");
			observableFeature_dataType_field_enumoptions.add("exe");
			observableFeature_dataType_field.setEnumOptions(observableFeature_dataType_field_enumoptions);
			observableFeature_dataType_field.setDevaultValue("string");
			observableFeature_dataType_field.setDescription("(Optional) Reference to the technical data type. E.g. 'int'");
			observableFeature_dataType_field.setNillable(false);
			observableFeature_entity.addField(observableFeature_dataType_field);
			Field observableFeature_temporal_field = new Field(observableFeature_entity, "temporal", MolgenisFieldTypes.getType("bool"));
			observableFeature_temporal_field.setDevaultValue("false");
			observableFeature_temporal_field.setDescription("Whether this feature is time dependent and can have different values when measured       on different times (e.g. weight, temporal=true) or generally only measured once (e.g. birth date,       temporal=false)");
			observableFeature_temporal_field.setNillable(false);
			observableFeature_entity.addField(observableFeature_temporal_field);
			Field observableFeature_id_field = new Field(observableFeature_entity, "id", MolgenisFieldTypes.getType("int"));
			observableFeature_id_field.setAuto(true);
			observableFeature_id_field.setDescription("automatically generated internal id, only for internal use.");
			observableFeature_id_field.setNillable(false);
			observableFeature_entity.addField(observableFeature_id_field);
			observableFeature_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Protocol
			Entity protocol_entity = new Entity("Protocol",this.getDatabase());
			protocol_entity.setSystem(false);
			protocol_entity.setAbstract(false);
			protocol_entity.setParents(new String[]{"Characteristic"});
			protocol_entity.setDescription("\n\t\t\t\tThe Protocol class defines parameterizable descriptions\n\t\t\t\tof\n\t\t\t\t(analysis)methods. Examples of protocols are: Questionaires, SOPs,\n\t\t\t\tAssay platforms, Statistical analyses, etc.\n\t\t\t\tEach protocol has a\n\t\t\t\tunique identifier.\n\t\t\t\tProtocol has an association to OntologyTerm to\n\t\t\t\trepresent the type of\n\t\t\t\tprotocol.\n\t\t\t\n");
			protocol_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field protocol_protocolType_field = new Field(protocol_entity, "ProtocolType", MolgenisFieldTypes.getType("xref"));
			protocol_protocolType_field.setDescription("classification of protocol");
			protocol_protocolType_field.setNillable(true);
			protocol_protocolType_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			protocol_entity.addField(protocol_protocolType_field);
			Field protocol_subprotocols_field = new Field(protocol_entity, "subprotocols", MolgenisFieldTypes.getType("mref"));
			protocol_subprotocols_field.setDescription("Subprotocols of this protocol");
			protocol_subprotocols_field.setNillable(true);
			protocol_subprotocols_field.setXRefVariables("Protocol", "id",Arrays.asList(new String[]{"Identifier"}));
			protocol_entity.addField(protocol_subprotocols_field);
			Field protocol_features_field = new Field(protocol_entity, "Features", MolgenisFieldTypes.getType("mref"));
			protocol_features_field.setDescription("parameters (in/out) that are used or produced by this protocol.");
			protocol_features_field.setNillable(true);
			protocol_features_field.setXRefVariables("ObservableFeature", "id",Arrays.asList(new String[]{"Identifier"}));
			protocol_entity.addField(protocol_features_field);
			Field protocol_id_field = new Field(protocol_entity, "id", MolgenisFieldTypes.getType("int"));
			protocol_id_field.setAuto(true);
			protocol_id_field.setDescription("automatically generated internal id, only for internal use.");
			protocol_id_field.setNillable(false);
			protocol_entity.addField(protocol_id_field);
			protocol_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//DataSet
			Entity dataSet_entity = new Entity("DataSet",this.getDatabase());
			dataSet_entity.setSystem(false);
			dataSet_entity.setAbstract(false);
			dataSet_entity.setParents(new String[]{"Characteristic"});
			dataSet_entity.setDescription("Container for one or more observations that are measured\n\t\t\t\tusing the same protocol and by the same performer(s). The dataset\n\t\t\t\tmay be a file (having the same\n\t\t\t\tidentifier) but in most cases it is a\n\t\t\t\tdata table consisting of rows (Observation).\n\n\t\t\t\tThis entity replaces\n\t\t\t\tProtocolApplication.\n\t\t\t\n");
			dataSet_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field dataSet_protocolUsed_field = new Field(dataSet_entity, "ProtocolUsed", MolgenisFieldTypes.getType("xref"));
			dataSet_protocolUsed_field.setDescription("Reference to the protocol that is being used (if available)");
			dataSet_protocolUsed_field.setNillable(true);
			dataSet_protocolUsed_field.setXRefVariables("Protocol", "id",Arrays.asList(new String[]{"Identifier"}));
			dataSet_entity.addField(dataSet_protocolUsed_field);
			Field dataSet_startTime_field = new Field(dataSet_entity, "startTime", MolgenisFieldTypes.getType("datetime"));
			dataSet_startTime_field.setAuto(true);
			dataSet_startTime_field.setDescription("time when the protocol started.");
			dataSet_startTime_field.setNillable(false);
			dataSet_entity.addField(dataSet_startTime_field);
			Field dataSet_endTime_field = new Field(dataSet_entity, "endTime", MolgenisFieldTypes.getType("datetime"));
			dataSet_endTime_field.setAuto(true);
			dataSet_endTime_field.setDescription("(Optional) time when the protocol ended.");
			dataSet_endTime_field.setNillable(true);
			dataSet_entity.addField(dataSet_endTime_field);
			Field dataSet_id_field = new Field(dataSet_entity, "id", MolgenisFieldTypes.getType("int"));
			dataSet_id_field.setAuto(true);
			dataSet_id_field.setDescription("automatically generated internal id, only for internal use.");
			dataSet_id_field.setNillable(false);
			dataSet_entity.addField(dataSet_id_field);
			dataSet_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Panel
			Entity panel_entity = new Entity("Panel",this.getDatabase());
			panel_entity.setSystem(false);
			panel_entity.setAbstract(false);
			panel_entity.setParents(new String[]{"ObservationTarget"});
			panel_entity.setDescription("The Panel class defines groups of individuals based on\n\t\t\t\tcohort design, case/controls, families, etc. For instance:\n\t\t\t\t'LifeLines\n\t\t\t\tcohort', 'middle aged man', 'recombinant mouse inbred Line\n\t\t\t\tdba x b6'\n\t\t\t\tor 'Smith family'. A Panel can act as a single\n\t\t\t\tObservationTarget.\n\t\t\t\tFor example: average height (Measurement) in the\n\t\t\t\tLifeLines cohort\n\t\t\t\t(Panel) is 174cm (ObservedValue). The Panel class\n\t\t\t\tmaps to XGAP:Strain and PaGE:Panel\n\t\t\t\tclasses. In METABASE this is\n\t\t\t\tassumed there is one panel per study.\n\t\t\t\n");
			panel_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field panel_panelType_field = new Field(panel_entity, "PanelType", MolgenisFieldTypes.getType("xref"));
			panel_panelType_field.setDescription("Indicate the type of Panel (example: Sample panel, AssayedPanel, Natural=wild type, Parental=parents of a cross, F1=First generation of cross, RCC=Recombinant congenic, CSS=chromosome substitution)");
			panel_panelType_field.setNillable(true);
			panel_panelType_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			panel_entity.addField(panel_panelType_field);
			Field panel_numberOfIndividuals_field = new Field(panel_entity, "NumberOfIndividuals", MolgenisFieldTypes.getType("int"));
			panel_numberOfIndividuals_field.setDescription("NumberOfIndividuals");
			panel_numberOfIndividuals_field.setNillable(false);
			panel_entity.addField(panel_numberOfIndividuals_field);
			Field panel_species_field = new Field(panel_entity, "Species", MolgenisFieldTypes.getType("xref"));
			panel_species_field.setDescription("The species this panel is an instance of/part of/extracted from.");
			panel_species_field.setNillable(true);
			panel_species_field.setXRefVariables("Species", "id",Arrays.asList(new String[]{"Identifier"}));
			panel_entity.addField(panel_species_field);
			Field panel_individuals_field = new Field(panel_entity, "Individuals", MolgenisFieldTypes.getType("mref"));
			panel_individuals_field.setDescription("The list of individuals in this panel");
			panel_individuals_field.setNillable(true);
			panel_individuals_field.setXRefVariables("Individual", "id",Arrays.asList(new String[]{"Identifier"}));
			panel_entity.addField(panel_individuals_field);
			Field panel_id_field = new Field(panel_entity, "id", MolgenisFieldTypes.getType("int"));
			panel_id_field.setAuto(true);
			panel_id_field.setDescription("automatically generated internal id, only for internal use.");
			panel_id_field.setNillable(false);
			panel_entity.addField(panel_id_field);
			panel_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//BioSequence
			Entity bioSequence_entity = new Entity("BioSequence",this.getDatabase());
			bioSequence_entity.setSystem(false);
			bioSequence_entity.setAbstract(true);
			bioSequence_entity.setDescription("");
			Field bioSequence_residues_field = new Field(bioSequence_entity, "residues", MolgenisFieldTypes.getType("text"));
			bioSequence_residues_field.setDescription("A sequence of alphabetic characters representing biological residues (nucleic acids, amino acids). This column does not need to be manifested for all features; it is optional for features such as exons where the residues can be derived from the featureloc. It is recommended that the value for this column be manifested for features which may may non-contiguous sublocations (e.g. transcripts), since derivation at query time is non-trivial. For expressed sequence, the DNA sequence should be used rather than the RNA sequence.");
			bioSequence_residues_field.setNillable(true);
			bioSequence_entity.addField(bioSequence_residues_field);
			Field bioSequence_seqlen_field = new Field(bioSequence_entity, "seqlen", MolgenisFieldTypes.getType("int"));
			bioSequence_seqlen_field.setDescription("The length of the residue feature. See column:residues. This column is partially redundant with the residues column, and also with featureloc. This column is required because the location may be unknown and the residue sequence may not be manifested, yet it may be desirable to store and query the length of the feature. The seqlen should always be manifested where the length of the sequence is known.");
			bioSequence_seqlen_field.setNillable(true);
			bioSequence_entity.addField(bioSequence_seqlen_field);
			
			//Genome
			Entity genome_entity = new Entity("Genome",this.getDatabase());
			genome_entity.setSystem(false);
			genome_entity.setAbstract(false);
			genome_entity.setImplements(new String[]{"BioSequence"});
			genome_entity.setParents(new String[]{"Characteristic"});
			genome_entity.setDescription("");
			genome_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field genome_species_field = new Field(genome_entity, "species", MolgenisFieldTypes.getType("xref"));
			genome_species_field.setDescription("species this genome belongs to.");
			genome_species_field.setNillable(true);
			genome_species_field.setXRefVariables("Species", "id",Arrays.asList(new String[]{"Identifier"}));
			genome_entity.addField(genome_species_field);
			Field genome_id_field = new Field(genome_entity, "id", MolgenisFieldTypes.getType("int"));
			genome_id_field.setAuto(true);
			genome_id_field.setDescription("automatically generated internal id, only for internal use.");
			genome_id_field.setNillable(false);
			genome_entity.addField(genome_id_field);
			Field genome_residues_field = new Field(genome_entity, "residues", MolgenisFieldTypes.getType("text"));
			genome_residues_field.setDescription("A sequence of alphabetic characters representing biological residues (nucleic acids, amino acids). This column does not need to be manifested for all features; it is optional for features such as exons where the residues can be derived from the featureloc. It is recommended that the value for this column be manifested for features which may may non-contiguous sublocations (e.g. transcripts), since derivation at query time is non-trivial. For expressed sequence, the DNA sequence should be used rather than the RNA sequence.");
			genome_residues_field.setNillable(true);
			genome_entity.addField(genome_residues_field);
			Field genome_seqlen_field = new Field(genome_entity, "seqlen", MolgenisFieldTypes.getType("int"));
			genome_seqlen_field.setDescription("The length of the residue feature. See column:residues. This column is partially redundant with the residues column, and also with featureloc. This column is required because the location may be unknown and the residue sequence may not be manifested, yet it may be desirable to store and query the length of the feature. The seqlen should always be manifested where the length of the sequence is known.");
			genome_seqlen_field.setNillable(true);
			genome_entity.addField(genome_seqlen_field);
			genome_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Chromosome
			Entity chromosome_entity = new Entity("Chromosome",this.getDatabase());
			chromosome_entity.setSystem(false);
			chromosome_entity.setAbstract(false);
			chromosome_entity.setImplements(new String[]{"BioSequence"});
			chromosome_entity.setParents(new String[]{"Characteristic"});
			chromosome_entity.setDescription("Example: b37:chr1.\n");
			chromosome_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field chromosome_genome_field = new Field(chromosome_entity, "genome", MolgenisFieldTypes.getType("xref"));
			chromosome_genome_field.setDescription("genome");
			chromosome_genome_field.setNillable(false);
			chromosome_genome_field.setXRefVariables("Genome", "id",Arrays.asList(new String[]{"Identifier"}));
			chromosome_entity.addField(chromosome_genome_field);
			Field chromosome_orderNr_field = new Field(chromosome_entity, "orderNr", MolgenisFieldTypes.getType("int"));
			chromosome_orderNr_field.setDescription("orderNr");
			chromosome_orderNr_field.setNillable(false);
			chromosome_entity.addField(chromosome_orderNr_field);
			Field chromosome_isAutosomal_field = new Field(chromosome_entity, "isAutosomal", MolgenisFieldTypes.getType("bool"));
			chromosome_isAutosomal_field.setDescription("Is 'yes' when number of chromosomes is equal in male and female individuals, i.e., if not a sex chromosome.");
			chromosome_isAutosomal_field.setNillable(false);
			chromosome_entity.addField(chromosome_isAutosomal_field);
			Field chromosome_id_field = new Field(chromosome_entity, "id", MolgenisFieldTypes.getType("int"));
			chromosome_id_field.setAuto(true);
			chromosome_id_field.setDescription("automatically generated internal id, only for internal use.");
			chromosome_id_field.setNillable(false);
			chromosome_entity.addField(chromosome_id_field);
			Field chromosome_residues_field = new Field(chromosome_entity, "residues", MolgenisFieldTypes.getType("text"));
			chromosome_residues_field.setDescription("A sequence of alphabetic characters representing biological residues (nucleic acids, amino acids). This column does not need to be manifested for all features; it is optional for features such as exons where the residues can be derived from the featureloc. It is recommended that the value for this column be manifested for features which may may non-contiguous sublocations (e.g. transcripts), since derivation at query time is non-trivial. For expressed sequence, the DNA sequence should be used rather than the RNA sequence.");
			chromosome_residues_field.setNillable(true);
			chromosome_entity.addField(chromosome_residues_field);
			Field chromosome_seqlen_field = new Field(chromosome_entity, "seqlen", MolgenisFieldTypes.getType("int"));
			chromosome_seqlen_field.setDescription("The length of the residue feature. See column:residues. This column is partially redundant with the residues column, and also with featureloc. This column is required because the location may be unknown and the residue sequence may not be manifested, yet it may be desirable to store and query the length of the feature. The seqlen should always be manifested where the length of the sequence is known.");
			chromosome_seqlen_field.setNillable(true);
			chromosome_entity.addField(chromosome_seqlen_field);
			chromosome_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//GdnaPosition
			Entity gdnaPosition_entity = new Entity("GdnaPosition",this.getDatabase());
			gdnaPosition_entity.setSystem(false);
			gdnaPosition_entity.setAbstract(true);
			gdnaPosition_entity.setDescription("Having gDNA position\n");
			Field gdnaPosition_gdna_field = new Field(gdnaPosition_entity, "gdna", MolgenisFieldTypes.getType("xref"));
			gdnaPosition_gdna_field.setDescription("The genome this element lies on.");
			gdnaPosition_gdna_field.setNillable(true);
			gdnaPosition_gdna_field.setXRefVariables("Chromosome", "id",Arrays.asList(new String[]{"Identifier"}));
			gdnaPosition_entity.addField(gdnaPosition_gdna_field);
			Field gdnaPosition_gdna_start_field = new Field(gdnaPosition_entity, "gdna_start", MolgenisFieldTypes.getType("int"));
			gdnaPosition_gdna_start_field.setDescription("Start position on genomic sequence.");
			gdnaPosition_gdna_start_field.setNillable(true);
			gdnaPosition_entity.addField(gdnaPosition_gdna_start_field);
			Field gdnaPosition_gdna_end_field = new Field(gdnaPosition_entity, "gdna_end", MolgenisFieldTypes.getType("int"));
			gdnaPosition_gdna_end_field.setDescription("End position on genomic sequence.");
			gdnaPosition_gdna_end_field.setNillable(true);
			gdnaPosition_entity.addField(gdnaPosition_gdna_end_field);
			
			//Gene
			Entity gene_entity = new Entity("Gene",this.getDatabase());
			gene_entity.setSystem(false);
			gene_entity.setAbstract(false);
			gene_entity.setImplements(new String[]{"GdnaPosition","BioSequence"});
			gene_entity.setParents(new String[]{"Characteristic"});
			gene_entity.setDescription("Serves as a view on SequenceCharacteristics that are\n\t\t\t\tgenes / cdna\n\t\t\t\n");
			gene_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field gene_strand_field = new Field(gene_entity, "strand", MolgenisFieldTypes.getType("enum"));
			Vector<String> gene_strand_field_enumoptions = new Vector<String>();
			gene_strand_field_enumoptions.add("0");
			gene_strand_field_enumoptions.add("-1");
			gene_strand_field_enumoptions.add("+1");
			gene_strand_field.setEnumOptions(gene_strand_field_enumoptions);
			gene_strand_field.setDescription("The orientation/directionality of the location. Should be 0, -1 or +1.");
			gene_strand_field.setNillable(false);
			gene_entity.addField(gene_strand_field);
			Field gene_id_field = new Field(gene_entity, "id", MolgenisFieldTypes.getType("int"));
			gene_id_field.setAuto(true);
			gene_id_field.setDescription("automatically generated internal id, only for internal use.");
			gene_id_field.setNillable(false);
			gene_entity.addField(gene_id_field);
			Field gene_gdna_field = new Field(gene_entity, "gdna", MolgenisFieldTypes.getType("xref"));
			gene_gdna_field.setDescription("The genome this element lies on.");
			gene_gdna_field.setNillable(true);
			gene_gdna_field.setXRefVariables("Chromosome", "id",Arrays.asList(new String[]{"Identifier"}));
			gene_entity.addField(gene_gdna_field);
			Field gene_gdna_start_field = new Field(gene_entity, "gdna_start", MolgenisFieldTypes.getType("int"));
			gene_gdna_start_field.setDescription("Start position on genomic sequence.");
			gene_gdna_start_field.setNillable(true);
			gene_entity.addField(gene_gdna_start_field);
			Field gene_gdna_end_field = new Field(gene_entity, "gdna_end", MolgenisFieldTypes.getType("int"));
			gene_gdna_end_field.setDescription("End position on genomic sequence.");
			gene_gdna_end_field.setNillable(true);
			gene_entity.addField(gene_gdna_end_field);
			Field gene_residues_field = new Field(gene_entity, "residues", MolgenisFieldTypes.getType("text"));
			gene_residues_field.setDescription("A sequence of alphabetic characters representing biological residues (nucleic acids, amino acids). This column does not need to be manifested for all features; it is optional for features such as exons where the residues can be derived from the featureloc. It is recommended that the value for this column be manifested for features which may may non-contiguous sublocations (e.g. transcripts), since derivation at query time is non-trivial. For expressed sequence, the DNA sequence should be used rather than the RNA sequence.");
			gene_residues_field.setNillable(true);
			gene_entity.addField(gene_residues_field);
			Field gene_seqlen_field = new Field(gene_entity, "seqlen", MolgenisFieldTypes.getType("int"));
			gene_seqlen_field.setDescription("The length of the residue feature. See column:residues. This column is partially redundant with the residues column, and also with featureloc. This column is required because the location may be unknown and the residue sequence may not be manifested, yet it may be desirable to store and query the length of the feature. The seqlen should always be manifested where the length of the sequence is known.");
			gene_seqlen_field.setNillable(true);
			gene_entity.addField(gene_seqlen_field);
			gene_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//CdnaPosition
			Entity cdnaPosition_entity = new Entity("CdnaPosition",this.getDatabase());
			cdnaPosition_entity.setSystem(false);
			cdnaPosition_entity.setAbstract(true);
			cdnaPosition_entity.setDescription("");
			Field cdnaPosition_cdna_field = new Field(cdnaPosition_entity, "cdna", MolgenisFieldTypes.getType("xref"));
			cdnaPosition_cdna_field.setDescription("The gene this element lies on.");
			cdnaPosition_cdna_field.setNillable(true);
			cdnaPosition_cdna_field.setXRefVariables("Gene", "id",Arrays.asList(new String[]{"Identifier"}));
			cdnaPosition_entity.addField(cdnaPosition_cdna_field);
			Field cdnaPosition_cdna_start_field = new Field(cdnaPosition_entity, "cdna_start", MolgenisFieldTypes.getType("int"));
			cdnaPosition_cdna_start_field.setDescription("Start position on cDNA sequence.");
			cdnaPosition_cdna_start_field.setNillable(true);
			cdnaPosition_entity.addField(cdnaPosition_cdna_start_field);
			Field cdnaPosition_cdna_end_field = new Field(cdnaPosition_entity, "cdna_end", MolgenisFieldTypes.getType("int"));
			cdnaPosition_cdna_end_field.setDescription("End position on cDNA sequence.");
			cdnaPosition_cdna_end_field.setNillable(true);
			cdnaPosition_entity.addField(cdnaPosition_cdna_end_field);
			
			//Protein
			Entity protein_entity = new Entity("Protein",this.getDatabase());
			protein_entity.setSystem(false);
			protein_entity.setAbstract(false);
			protein_entity.setImplements(new String[]{"CdnaPosition","BioSequence"});
			protein_entity.setParents(new String[]{"Characteristic"});
			protein_entity.setDescription("Serves as a view on SequencesCharacteristics that are\n\t\t\t\tproteins / aa.\n\t\t\t\n");
			protein_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field protein_id_field = new Field(protein_entity, "id", MolgenisFieldTypes.getType("int"));
			protein_id_field.setAuto(true);
			protein_id_field.setDescription("automatically generated internal id, only for internal use.");
			protein_id_field.setNillable(false);
			protein_entity.addField(protein_id_field);
			Field protein_cdna_field = new Field(protein_entity, "cdna", MolgenisFieldTypes.getType("xref"));
			protein_cdna_field.setDescription("The gene this element lies on.");
			protein_cdna_field.setNillable(true);
			protein_cdna_field.setXRefVariables("Gene", "id",Arrays.asList(new String[]{"Identifier"}));
			protein_entity.addField(protein_cdna_field);
			Field protein_cdna_start_field = new Field(protein_entity, "cdna_start", MolgenisFieldTypes.getType("int"));
			protein_cdna_start_field.setDescription("Start position on cDNA sequence.");
			protein_cdna_start_field.setNillable(true);
			protein_entity.addField(protein_cdna_start_field);
			Field protein_cdna_end_field = new Field(protein_entity, "cdna_end", MolgenisFieldTypes.getType("int"));
			protein_cdna_end_field.setDescription("End position on cDNA sequence.");
			protein_cdna_end_field.setNillable(true);
			protein_entity.addField(protein_cdna_end_field);
			Field protein_residues_field = new Field(protein_entity, "residues", MolgenisFieldTypes.getType("text"));
			protein_residues_field.setDescription("A sequence of alphabetic characters representing biological residues (nucleic acids, amino acids). This column does not need to be manifested for all features; it is optional for features such as exons where the residues can be derived from the featureloc. It is recommended that the value for this column be manifested for features which may may non-contiguous sublocations (e.g. transcripts), since derivation at query time is non-trivial. For expressed sequence, the DNA sequence should be used rather than the RNA sequence.");
			protein_residues_field.setNillable(true);
			protein_entity.addField(protein_residues_field);
			Field protein_seqlen_field = new Field(protein_entity, "seqlen", MolgenisFieldTypes.getType("int"));
			protein_seqlen_field.setDescription("The length of the residue feature. See column:residues. This column is partially redundant with the residues column, and also with featureloc. This column is required because the location may be unknown and the residue sequence may not be manifested, yet it may be desirable to store and query the length of the feature. The seqlen should always be manifested where the length of the sequence is known.");
			protein_seqlen_field.setNillable(true);
			protein_entity.addField(protein_seqlen_field);
			protein_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//AaPosition
			Entity aaPosition_entity = new Entity("AaPosition",this.getDatabase());
			aaPosition_entity.setSystem(false);
			aaPosition_entity.setAbstract(true);
			aaPosition_entity.setDescription("Having aa position\n");
			Field aaPosition_aa_field = new Field(aaPosition_entity, "aa", MolgenisFieldTypes.getType("xref"));
			aaPosition_aa_field.setDescription("The protein sequence this element lies on.");
			aaPosition_aa_field.setNillable(true);
			aaPosition_aa_field.setXRefVariables("Protein", "id",Arrays.asList(new String[]{"Identifier"}));
			aaPosition_entity.addField(aaPosition_aa_field);
			Field aaPosition_aa_start_field = new Field(aaPosition_entity, "aa_start", MolgenisFieldTypes.getType("int"));
			aaPosition_aa_start_field.setDescription("Start position on amino acid sequence.");
			aaPosition_aa_start_field.setNillable(true);
			aaPosition_entity.addField(aaPosition_aa_start_field);
			Field aaPosition_aa_end_field = new Field(aaPosition_entity, "aa_end", MolgenisFieldTypes.getType("int"));
			aaPosition_aa_end_field.setDescription("End position on amino acid sequence.");
			aaPosition_aa_end_field.setNillable(true);
			aaPosition_entity.addField(aaPosition_aa_end_field);
			
			//ProteinDomain
			Entity proteinDomain_entity = new Entity("ProteinDomain",this.getDatabase());
			proteinDomain_entity.setSystem(false);
			proteinDomain_entity.setAbstract(false);
			proteinDomain_entity.setImplements(new String[]{"CdnaPosition","GdnaPosition"});
			proteinDomain_entity.setParents(new String[]{"Characteristic"});
			proteinDomain_entity.setDescription("Serves as a view on SequenceCharacteristics that are\n\t\t\t\tprotein domains.\n\t\t\t\n");
			proteinDomain_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field proteinDomain_id_field = new Field(proteinDomain_entity, "id", MolgenisFieldTypes.getType("int"));
			proteinDomain_id_field.setAuto(true);
			proteinDomain_id_field.setDescription("automatically generated internal id, only for internal use.");
			proteinDomain_id_field.setNillable(false);
			proteinDomain_entity.addField(proteinDomain_id_field);
			Field proteinDomain_cdna_field = new Field(proteinDomain_entity, "cdna", MolgenisFieldTypes.getType("xref"));
			proteinDomain_cdna_field.setDescription("The gene this element lies on.");
			proteinDomain_cdna_field.setNillable(true);
			proteinDomain_cdna_field.setXRefVariables("Gene", "id",Arrays.asList(new String[]{"Identifier"}));
			proteinDomain_entity.addField(proteinDomain_cdna_field);
			Field proteinDomain_cdna_start_field = new Field(proteinDomain_entity, "cdna_start", MolgenisFieldTypes.getType("int"));
			proteinDomain_cdna_start_field.setDescription("Start position on cDNA sequence.");
			proteinDomain_cdna_start_field.setNillable(true);
			proteinDomain_entity.addField(proteinDomain_cdna_start_field);
			Field proteinDomain_cdna_end_field = new Field(proteinDomain_entity, "cdna_end", MolgenisFieldTypes.getType("int"));
			proteinDomain_cdna_end_field.setDescription("End position on cDNA sequence.");
			proteinDomain_cdna_end_field.setNillable(true);
			proteinDomain_entity.addField(proteinDomain_cdna_end_field);
			Field proteinDomain_gdna_field = new Field(proteinDomain_entity, "gdna", MolgenisFieldTypes.getType("xref"));
			proteinDomain_gdna_field.setDescription("The genome this element lies on.");
			proteinDomain_gdna_field.setNillable(true);
			proteinDomain_gdna_field.setXRefVariables("Chromosome", "id",Arrays.asList(new String[]{"Identifier"}));
			proteinDomain_entity.addField(proteinDomain_gdna_field);
			Field proteinDomain_gdna_start_field = new Field(proteinDomain_entity, "gdna_start", MolgenisFieldTypes.getType("int"));
			proteinDomain_gdna_start_field.setDescription("Start position on genomic sequence.");
			proteinDomain_gdna_start_field.setNillable(true);
			proteinDomain_entity.addField(proteinDomain_gdna_start_field);
			Field proteinDomain_gdna_end_field = new Field(proteinDomain_entity, "gdna_end", MolgenisFieldTypes.getType("int"));
			proteinDomain_gdna_end_field.setDescription("End position on genomic sequence.");
			proteinDomain_gdna_end_field.setNillable(true);
			proteinDomain_entity.addField(proteinDomain_gdna_end_field);
			proteinDomain_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Exon
			Entity exon_entity = new Entity("Exon",this.getDatabase());
			exon_entity.setSystem(false);
			exon_entity.setAbstract(false);
			exon_entity.setImplements(new String[]{"CdnaPosition","GdnaPosition"});
			exon_entity.setParents(new String[]{"Characteristic"});
			exon_entity.setDescription("Serves as a view on SequenceCharacteristics that are\n\t\t\t\texons or introns.\n\t\t\t\n");
			exon_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field exon_isIntron_field = new Field(exon_entity, "isIntron", MolgenisFieldTypes.getType("bool"));
			exon_isIntron_field.setDescription("Is this exon actually an intron?");
			exon_isIntron_field.setNillable(false);
			exon_entity.addField(exon_isIntron_field);
			Field exon_id_field = new Field(exon_entity, "id", MolgenisFieldTypes.getType("int"));
			exon_id_field.setAuto(true);
			exon_id_field.setDescription("automatically generated internal id, only for internal use.");
			exon_id_field.setNillable(false);
			exon_entity.addField(exon_id_field);
			Field exon_cdna_field = new Field(exon_entity, "cdna", MolgenisFieldTypes.getType("xref"));
			exon_cdna_field.setDescription("The gene this element lies on.");
			exon_cdna_field.setNillable(true);
			exon_cdna_field.setXRefVariables("Gene", "id",Arrays.asList(new String[]{"Identifier"}));
			exon_entity.addField(exon_cdna_field);
			Field exon_cdna_start_field = new Field(exon_entity, "cdna_start", MolgenisFieldTypes.getType("int"));
			exon_cdna_start_field.setDescription("Start position on cDNA sequence.");
			exon_cdna_start_field.setNillable(true);
			exon_entity.addField(exon_cdna_start_field);
			Field exon_cdna_end_field = new Field(exon_entity, "cdna_end", MolgenisFieldTypes.getType("int"));
			exon_cdna_end_field.setDescription("End position on cDNA sequence.");
			exon_cdna_end_field.setNillable(true);
			exon_entity.addField(exon_cdna_end_field);
			Field exon_gdna_field = new Field(exon_entity, "gdna", MolgenisFieldTypes.getType("xref"));
			exon_gdna_field.setDescription("The genome this element lies on.");
			exon_gdna_field.setNillable(true);
			exon_gdna_field.setXRefVariables("Chromosome", "id",Arrays.asList(new String[]{"Identifier"}));
			exon_entity.addField(exon_gdna_field);
			Field exon_gdna_start_field = new Field(exon_entity, "gdna_start", MolgenisFieldTypes.getType("int"));
			exon_gdna_start_field.setDescription("Start position on genomic sequence.");
			exon_gdna_start_field.setNillable(true);
			exon_entity.addField(exon_gdna_start_field);
			Field exon_gdna_end_field = new Field(exon_entity, "gdna_end", MolgenisFieldTypes.getType("int"));
			exon_gdna_end_field.setDescription("End position on genomic sequence.");
			exon_gdna_end_field.setNillable(true);
			exon_entity.addField(exon_gdna_end_field);
			exon_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Variant
			Entity variant_entity = new Entity("Variant",this.getDatabase());
			variant_entity.setSystem(false);
			variant_entity.setAbstract(false);
			variant_entity.setImplements(new String[]{"GdnaPosition","CdnaPosition","AaPosition"});
			variant_entity.setParents(new String[]{"Characteristic"});
			variant_entity.setDescription("Convenient entity to define in one place variants on\n\t\t\t\tgdna, cdna and aa level.\n\t\t\t\n");
			variant_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field variant_gdna_notation_field = new Field(variant_entity, "gdna_notation", MolgenisFieldTypes.getType("string"));
			variant_gdna_notation_field.setDescription("gDNA notation of the variant, e.g. g.1234567C>T");
			variant_gdna_notation_field.setNillable(false);
			variant_entity.addField(variant_gdna_notation_field);
			Field variant_cdna_notation_field = new Field(variant_entity, "cdna_notation", MolgenisFieldTypes.getType("string"));
			variant_cdna_notation_field.setDescription("cDNA notation of the variant, e.g. c.123C>T");
			variant_cdna_notation_field.setNillable(false);
			variant_entity.addField(variant_cdna_notation_field);
			Field variant_aa_notation_field = new Field(variant_entity, "aa_notation", MolgenisFieldTypes.getType("string"));
			variant_aa_notation_field.setDescription("Aa notation of the variant, e.g. p.Ser123ArgfsX12");
			variant_aa_notation_field.setNillable(true);
			variant_entity.addField(variant_aa_notation_field);
			Field variant_variantType_field = new Field(variant_entity, "variantType", MolgenisFieldTypes.getType("xref"));
			variant_variantType_field.setDescription("Type of the variant.");
			variant_variantType_field.setNillable(true);
			variant_variantType_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			variant_entity.addField(variant_variantType_field);
			Field variant_id_field = new Field(variant_entity, "id", MolgenisFieldTypes.getType("int"));
			variant_id_field.setAuto(true);
			variant_id_field.setDescription("automatically generated internal id, only for internal use.");
			variant_id_field.setNillable(false);
			variant_entity.addField(variant_id_field);
			Field variant_gdna_field = new Field(variant_entity, "gdna", MolgenisFieldTypes.getType("xref"));
			variant_gdna_field.setDescription("The genome this element lies on.");
			variant_gdna_field.setNillable(true);
			variant_gdna_field.setXRefVariables("Chromosome", "id",Arrays.asList(new String[]{"Identifier"}));
			variant_entity.addField(variant_gdna_field);
			Field variant_gdna_start_field = new Field(variant_entity, "gdna_start", MolgenisFieldTypes.getType("int"));
			variant_gdna_start_field.setDescription("Start position on genomic sequence.");
			variant_gdna_start_field.setNillable(true);
			variant_entity.addField(variant_gdna_start_field);
			Field variant_gdna_end_field = new Field(variant_entity, "gdna_end", MolgenisFieldTypes.getType("int"));
			variant_gdna_end_field.setDescription("End position on genomic sequence.");
			variant_gdna_end_field.setNillable(true);
			variant_entity.addField(variant_gdna_end_field);
			Field variant_cdna_field = new Field(variant_entity, "cdna", MolgenisFieldTypes.getType("xref"));
			variant_cdna_field.setDescription("The gene this element lies on.");
			variant_cdna_field.setNillable(true);
			variant_cdna_field.setXRefVariables("Gene", "id",Arrays.asList(new String[]{"Identifier"}));
			variant_entity.addField(variant_cdna_field);
			Field variant_cdna_start_field = new Field(variant_entity, "cdna_start", MolgenisFieldTypes.getType("int"));
			variant_cdna_start_field.setDescription("Start position on cDNA sequence.");
			variant_cdna_start_field.setNillable(true);
			variant_entity.addField(variant_cdna_start_field);
			Field variant_cdna_end_field = new Field(variant_entity, "cdna_end", MolgenisFieldTypes.getType("int"));
			variant_cdna_end_field.setDescription("End position on cDNA sequence.");
			variant_cdna_end_field.setNillable(true);
			variant_entity.addField(variant_cdna_end_field);
			Field variant_aa_field = new Field(variant_entity, "aa", MolgenisFieldTypes.getType("xref"));
			variant_aa_field.setDescription("The protein sequence this element lies on.");
			variant_aa_field.setNillable(true);
			variant_aa_field.setXRefVariables("Protein", "id",Arrays.asList(new String[]{"Identifier"}));
			variant_entity.addField(variant_aa_field);
			Field variant_aa_start_field = new Field(variant_entity, "aa_start", MolgenisFieldTypes.getType("int"));
			variant_aa_start_field.setDescription("Start position on amino acid sequence.");
			variant_aa_start_field.setNillable(true);
			variant_entity.addField(variant_aa_start_field);
			Field variant_aa_end_field = new Field(variant_entity, "aa_end", MolgenisFieldTypes.getType("int"));
			variant_aa_end_field.setDescription("End position on amino acid sequence.");
			variant_aa_end_field.setNillable(true);
			variant_entity.addField(variant_aa_end_field);
			variant_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Institute
			Entity institute_entity = new Entity("Institute",this.getDatabase());
			institute_entity.setSystem(false);
			institute_entity.setAbstract(false);
			institute_entity.setImplements(new String[]{"Autoid"});
			institute_entity.setDescription(" A contact is either a person or an organization. Copied\n\t\t\t\tfrom FuGE::Contact.\n\t\t\t\n");
			institute_entity.setXrefLabels(Arrays.asList(new String[]{"name"}));
			Field institute_name_field = new Field(institute_entity, "name", MolgenisFieldTypes.getType("string"));
			institute_name_field.setDescription("name");
			institute_name_field.setNillable(false);
			institute_entity.addField(institute_name_field);
			Field institute_address_field = new Field(institute_entity, "Address", MolgenisFieldTypes.getType("text"));
			institute_address_field.setDescription("The address of the Contact.");
			institute_address_field.setNillable(true);
			institute_entity.addField(institute_address_field);
			Field institute_phone_field = new Field(institute_entity, "Phone", MolgenisFieldTypes.getType("string"));
			institute_phone_field.setDescription("The telephone number of the Contact including the suitable area codes.");
			institute_phone_field.setNillable(true);
			institute_entity.addField(institute_phone_field);
			Field institute_city_field = new Field(institute_entity, "City", MolgenisFieldTypes.getType("string"));
			institute_city_field.setDescription("Added from the old definition of MolgenisUser. City of this contact.");
			institute_city_field.setNillable(true);
			institute_entity.addField(institute_city_field);
			Field institute_country_field = new Field(institute_entity, "Country", MolgenisFieldTypes.getType("string"));
			institute_country_field.setDescription("Added from the old definition of MolgenisUser. Country of this contact.");
			institute_country_field.setNillable(true);
			institute_entity.addField(institute_country_field);
			Field institute_fax_field = new Field(institute_entity, "Fax", MolgenisFieldTypes.getType("string"));
			institute_fax_field.setDescription("The fax number of the Contact.");
			institute_fax_field.setNillable(true);
			institute_entity.addField(institute_fax_field);
			Field institute_id_field = new Field(institute_entity, "id", MolgenisFieldTypes.getType("int"));
			institute_id_field.setAuto(true);
			institute_id_field.setDescription("automatically generated internal id, only for internal use.");
			institute_id_field.setNillable(false);
			institute_entity.addField(institute_id_field);
			institute_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			institute_entity.addKey(Arrays.asList(new String[]{"name"}),false,"");
			
			//Person
			Entity person_entity = new Entity("Person",this.getDatabase());
			person_entity.setSystem(false);
			person_entity.setAbstract(false);
			person_entity.setImplements(new String[]{"Autoid"});
			person_entity.setDescription("\n\n\t\t\t\tPerson represents one or more people involved with an Investigation.\n\t\t\t\tThis may include authors on a paper, lab personnel or PIs. Person\n\t\t\t\thas last name, firstname, mid initial, address, contact and email. A\n\t\t\t\tPerson role is included to represent how a Person is involved with\n\t\t\t\tan investigation. For submission to repository purposes an allowed\n\t\t\t\tvalue is 'submitter' and the term is present in the MGED Ontology,\n\t\t\t\tan alternative use could represent job title. An Example from\n\t\t\t\tArrayExpress is E-MTAB-506\n\t\t\t\t<a href=\"ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt\">\n\t\t\t\t\tftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt.\n\t\t\t\t</a>\n\t\t\t\t.\n    <!-- From MIBBI : Name should either be of the person or the institutional role holding responsibility for the associated (meta)data. -->\n    <br/>\n\t\t\t\tThe FUGE equivalent to Person is FuGE::Person.\n\t\t\t\n");
			person_entity.setXrefLabels(Arrays.asList(new String[]{"Name"}));
			Field person_name_field = new Field(person_entity, "Name", MolgenisFieldTypes.getType("string"));
			person_name_field.setDescription("Name");
			person_name_field.setNillable(false);
			person_entity.addField(person_name_field);
			Field person_title_field = new Field(person_entity, "Title", MolgenisFieldTypes.getType("string"));
			person_title_field.setDescription("An academic title, e.g. Prof.dr, PhD");
			person_title_field.setNillable(true);
			person_entity.addField(person_title_field);
			Field person_firstName_field = new Field(person_entity, "FirstName", MolgenisFieldTypes.getType("string"));
			person_firstName_field.setDescription("First Name");
			person_firstName_field.setNillable(true);
			person_entity.addField(person_firstName_field);
			Field person_midInitials_field = new Field(person_entity, "MidInitials", MolgenisFieldTypes.getType("string"));
			person_midInitials_field.setDescription("Mid Initials");
			person_midInitials_field.setNillable(true);
			person_entity.addField(person_midInitials_field);
			Field person_lastName_field = new Field(person_entity, "LastName", MolgenisFieldTypes.getType("string"));
			person_lastName_field.setDescription("Last Name");
			person_lastName_field.setNillable(true);
			person_entity.addField(person_lastName_field);
			Field person_email_field = new Field(person_entity, "Email", MolgenisFieldTypes.getType("email"));
			person_email_field.setDescription("Email");
			person_email_field.setNillable(true);
			person_entity.addField(person_email_field);
			Field person_phone_field = new Field(person_entity, "Phone", MolgenisFieldTypes.getType("string"));
			person_phone_field.setDescription("The telephone number of the Contact including the suitable area codes.");
			person_phone_field.setNillable(true);
			person_entity.addField(person_phone_field);
			Field person_primaryAffilation_field = new Field(person_entity, "PrimaryAffilation", MolgenisFieldTypes.getType("xref"));
			person_primaryAffilation_field.setDescription("Affliations");
			person_primaryAffilation_field.setNillable(true);
			person_primaryAffilation_field.setXRefVariables("Institute", "id",Arrays.asList(new String[]{"name"}));
			person_entity.addField(person_primaryAffilation_field);
			Field person_affiliateInstitutions_field = new Field(person_entity, "AffiliateInstitutions", MolgenisFieldTypes.getType("mref"));
			person_affiliateInstitutions_field.setDescription("Affliated Institutes");
			person_affiliateInstitutions_field.setNillable(true);
			person_affiliateInstitutions_field.setXRefVariables("Institute", "id",Arrays.asList(new String[]{"name"}));
			person_entity.addField(person_affiliateInstitutions_field);
			Field person_orcidPersonReference_field = new Field(person_entity, "OrcidPersonReference", MolgenisFieldTypes.getType("xref"));
			person_orcidPersonReference_field.setDescription("OrcidPersonReference");
			person_orcidPersonReference_field.setNillable(true);
			person_orcidPersonReference_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			person_entity.addField(person_orcidPersonReference_field);
			Field person_id_field = new Field(person_entity, "id", MolgenisFieldTypes.getType("int"));
			person_id_field.setAuto(true);
			person_id_field.setDescription("automatically generated internal id, only for internal use.");
			person_id_field.setNillable(false);
			person_entity.addField(person_id_field);
			person_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			person_entity.addKey(Arrays.asList(new String[]{"Name"}),false,"");
			person_entity.addKey(Arrays.asList(new String[]{"FirstName","MidInitials","LastName"}),false,"");
			
			//Citation
			Entity citation_entity = new Entity("Citation",this.getDatabase());
			citation_entity.setSystem(false);
			citation_entity.setAbstract(false);
			citation_entity.setImplements(new String[]{"Identifiable"});
			citation_entity.setDescription("\n\n\t\t\t\tCitation of a document or data set. Publications have\n\t\t\t\tattributes of\n\t\t\t\tpublications Authors and also DOI and Pubmed\n\t\t\t\tidentifiers (when these\n\t\t\t\tare available). These are represented as\n\t\t\t\tOntologyTerms as in the\n\t\t\t\tMAGE-TAB model all 'xrefs' (cross\n\t\t\t\treferences) for ontologies and\n\t\t\t\taccession numbers are handled\n\t\t\t\tgenerically. An example of a\n\t\t\t\tpublication is available in an IDF file\n\t\t\t\tfrom ArrayExpress is\n\t\t\t\texperiment E-MTAB-506\n\t\t\t\t<a href=\"ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt\">ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt\n\t\t\t\t</a>\n\t\t\t\t.\n\t\t\t\t<br/>\n\t\t\t\tThe FuGE equivalent to Publication is FuGE::Bibliographic Reference.\n\t\t\t\n");
			citation_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field citation_pubmedID_field = new Field(citation_entity, "PubmedID", MolgenisFieldTypes.getType("string"));
			citation_pubmedID_field.setDescription("Pubmed ID");
			citation_pubmedID_field.setNillable(true);
			citation_entity.addField(citation_pubmedID_field);
			Field citation_dOI_field = new Field(citation_entity, "DOI", MolgenisFieldTypes.getType("string"));
			citation_dOI_field.setDescription("Publication DOI");
			citation_dOI_field.setNillable(true);
			citation_entity.addField(citation_dOI_field);
			Field citation_ontologyTerms_field = new Field(citation_entity, "ontologyTerms", MolgenisFieldTypes.getType("mref"));
			citation_ontologyTerms_field.setDescription("ontology terms such as MeSH");
			citation_ontologyTerms_field.setNillable(true);
			citation_ontologyTerms_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			citation_entity.addField(citation_ontologyTerms_field);
			Field citation_authorList_field = new Field(citation_entity, "authorList", MolgenisFieldTypes.getType("text"));
			citation_authorList_field.setDescription("The names of the authors of the publication");
			citation_authorList_field.setNillable(true);
			citation_entity.addField(citation_authorList_field);
			Field citation_title_field = new Field(citation_entity, "Title", MolgenisFieldTypes.getType("string"));
			citation_title_field.setDescription("The title of the Publication");
			citation_title_field.setNillable(false);
			citation_entity.addField(citation_title_field);
			Field citation_description_field = new Field(citation_entity, "Description", MolgenisFieldTypes.getType("text"));
			citation_description_field.setDescription("Description");
			citation_description_field.setNillable(false);
			citation_entity.addField(citation_description_field);
			Field citation_status_field = new Field(citation_entity, "Status", MolgenisFieldTypes.getType("xref"));
			citation_status_field.setDescription("The status of the Publication");
			citation_status_field.setNillable(true);
			citation_status_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			citation_entity.addField(citation_status_field);
			Field citation_identifier_field = new Field(citation_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			citation_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			citation_identifier_field.setNillable(false);
			citation_entity.addField(citation_identifier_field);
			Field citation_name_field = new Field(citation_entity, "Name", MolgenisFieldTypes.getType("string"));
			citation_name_field.setDescription("human readible name, not necessary unique.");
			citation_name_field.setNillable(false);
			citation_entity.addField(citation_name_field);
			Field citation_id_field = new Field(citation_entity, "id", MolgenisFieldTypes.getType("int"));
			citation_id_field.setAuto(true);
			citation_id_field.setDescription("automatically generated internal id, only for internal use.");
			citation_id_field.setNillable(false);
			citation_entity.addField(citation_id_field);
			citation_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			citation_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			citation_entity.addKey(Arrays.asList(new String[]{"PubmedID"}),false,"");
			citation_entity.addKey(Arrays.asList(new String[]{"DOI"}),false,"");
			
			//Investigation
			Entity investigation_entity = new Entity("Investigation",this.getDatabase());
			investigation_entity.setSystem(false);
			investigation_entity.setAbstract(false);
			investigation_entity.setImplements(new String[]{"Identifiable"});
			investigation_entity.setDescription("");
			investigation_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field investigation_title_field = new Field(investigation_entity, "Title", MolgenisFieldTypes.getType("text"));
			investigation_title_field.setDescription("Nice title of Investigation");
			investigation_title_field.setNillable(true);
			investigation_entity.addField(investigation_title_field);
			Field investigation_shortName_field = new Field(investigation_entity, "ShortName", MolgenisFieldTypes.getType("text"));
			investigation_shortName_field.setDescription("Shorthand name for layout");
			investigation_shortName_field.setNillable(true);
			investigation_entity.addField(investigation_shortName_field);
			Field investigation_version_field = new Field(investigation_entity, "Version", MolgenisFieldTypes.getType("string"));
			investigation_version_field.setDescription("Accession version");
			investigation_version_field.setNillable(true);
			investigation_entity.addField(investigation_version_field);
			Field investigation_background_field = new Field(investigation_entity, "Background", MolgenisFieldTypes.getType("text"));
			investigation_background_field.setDescription("Short piece of information describing why the study is taking place, e.g. risk factors for a population");
			investigation_background_field.setNillable(true);
			investigation_entity.addField(investigation_background_field);
			Field investigation_identifier_field = new Field(investigation_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			investigation_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			investigation_identifier_field.setNillable(false);
			investigation_entity.addField(investigation_identifier_field);
			Field investigation_name_field = new Field(investigation_entity, "Name", MolgenisFieldTypes.getType("string"));
			investigation_name_field.setDescription("human readible name, not necessary unique.");
			investigation_name_field.setNillable(false);
			investigation_entity.addField(investigation_name_field);
			Field investigation_id_field = new Field(investigation_entity, "id", MolgenisFieldTypes.getType("int"));
			investigation_id_field.setAuto(true);
			investigation_id_field.setDescription("automatically generated internal id, only for internal use.");
			investigation_id_field.setNillable(false);
			investigation_entity.addField(investigation_id_field);
			investigation_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			investigation_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//Study
			Entity study_entity = new Entity("Study",this.getDatabase());
			study_entity.setSystem(false);
			study_entity.setAbstract(false);
			study_entity.setImplements(new String[]{"Identifiable"});
			study_entity.setDescription("Investigation defines self-contained units of study. For\n\t\t\t\texample: Framingham study. Optionally a description and an accession\n\t\t\t\tto a data source can be provided. Each Investigation has a unique\n\t\t\t\tidentifier.\n\t\t\t\n");
			study_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field study_description_field = new Field(study_entity, "Description", MolgenisFieldTypes.getType("text"));
			study_description_field.setDescription("(Optional)      Rudimentary meta data about the Investigation");
			study_description_field.setNillable(true);
			study_entity.addField(study_description_field);
			Field study_startDate_field = new Field(study_entity, "StartDate", MolgenisFieldTypes.getType("datetime"));
			study_startDate_field.setAuto(true);
			study_startDate_field.setDescription("The start point of the study.");
			study_startDate_field.setNillable(true);
			study_entity.addField(study_startDate_field);
			Field study_updateDate_field = new Field(study_entity, "UpdateDate", MolgenisFieldTypes.getType("datetime"));
			study_updateDate_field.setAuto(true);
			study_updateDate_field.setDescription("Last time the investigation was modified");
			study_updateDate_field.setNillable(false);
			study_entity.addField(study_updateDate_field);
			Field study_endDate_field = new Field(study_entity, "EndDate", MolgenisFieldTypes.getType("datetime"));
			study_endDate_field.setDescription("The end point of the study.");
			study_endDate_field.setNillable(true);
			study_entity.addField(study_endDate_field);
			Field study_contact_field = new Field(study_entity, "Contact", MolgenisFieldTypes.getType("xref"));
			study_contact_field.setDescription("Primary contact person for this study");
			study_contact_field.setNillable(true);
			study_contact_field.setXRefVariables("Person", "id",Arrays.asList(new String[]{"Name"}));
			study_entity.addField(study_contact_field);
			Field study_partOfInvestigation_field = new Field(study_entity, "PartOfInvestigation", MolgenisFieldTypes.getType("xref"));
			study_partOfInvestigation_field.setDescription("xref to the investigation the study is part of");
			study_partOfInvestigation_field.setNillable(false);
			study_partOfInvestigation_field.setXRefVariables("Investigation", "id",Arrays.asList(new String[]{"Identifier"}));
			study_entity.addField(study_partOfInvestigation_field);
			Field study_identifier_field = new Field(study_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			study_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			study_identifier_field.setNillable(false);
			study_entity.addField(study_identifier_field);
			Field study_name_field = new Field(study_entity, "Name", MolgenisFieldTypes.getType("string"));
			study_name_field.setDescription("human readible name, not necessary unique.");
			study_name_field.setNillable(false);
			study_entity.addField(study_name_field);
			Field study_id_field = new Field(study_entity, "id", MolgenisFieldTypes.getType("int"));
			study_id_field.setAuto(true);
			study_id_field.setDescription("automatically generated internal id, only for internal use.");
			study_id_field.setNillable(false);
			study_entity.addField(study_id_field);
			study_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			study_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//Experiment
			Entity experiment_entity = new Entity("Experiment",this.getDatabase());
			experiment_entity.setSystem(false);
			experiment_entity.setAbstract(false);
			experiment_entity.setImplements(new String[]{"Identifiable"});
			experiment_entity.setDescription("");
			experiment_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field experiment_study_field = new Field(experiment_entity, "Study", MolgenisFieldTypes.getType("xref"));
			experiment_study_field.setDescription("Part of Study.");
			experiment_study_field.setNillable(false);
			experiment_study_field.setXRefVariables("Study", "id",Arrays.asList(new String[]{"Identifier"}));
			experiment_entity.addField(experiment_study_field);
			Field experiment_design_field = new Field(experiment_entity, "Design", MolgenisFieldTypes.getType("string"));
			experiment_design_field.setDescription("Design");
			experiment_design_field.setNillable(true);
			experiment_entity.addField(experiment_design_field);
			Field experiment_experimentType_field = new Field(experiment_entity, "ExperimentType", MolgenisFieldTypes.getType("xref"));
			experiment_experimentType_field.setDescription("Experiment type. E.g. 'case-control'.");
			experiment_experimentType_field.setNillable(false);
			experiment_experimentType_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			experiment_entity.addField(experiment_experimentType_field);
			Field experiment_totalMarkersTested_field = new Field(experiment_entity, "TotalMarkersTested", MolgenisFieldTypes.getType("int"));
			experiment_totalMarkersTested_field.setDescription("Total markers tested");
			experiment_totalMarkersTested_field.setNillable(true);
			experiment_entity.addField(experiment_totalMarkersTested_field);
			Field experiment_totalMarkersImported_field = new Field(experiment_entity, "TotalMarkersImported", MolgenisFieldTypes.getType("int"));
			experiment_totalMarkersImported_field.setDescription("Total markers imported");
			experiment_totalMarkersImported_field.setNillable(true);
			experiment_entity.addField(experiment_totalMarkersImported_field);
			Field experiment_objective_field = new Field(experiment_entity, "Objective", MolgenisFieldTypes.getType("text"));
			experiment_objective_field.setDescription("Objective");
			experiment_objective_field.setNillable(true);
			experiment_entity.addField(experiment_objective_field);
			Field experiment_outcome_field = new Field(experiment_entity, "Outcome", MolgenisFieldTypes.getType("text"));
			experiment_outcome_field.setDescription("Outcome");
			experiment_outcome_field.setNillable(true);
			experiment_entity.addField(experiment_outcome_field);
			Field experiment_comments_field = new Field(experiment_entity, "Comments", MolgenisFieldTypes.getType("text"));
			experiment_comments_field.setDescription("Comments");
			experiment_comments_field.setNillable(true);
			experiment_entity.addField(experiment_comments_field);
			Field experiment_individualDataStatement_field = new Field(experiment_entity, "IndividualDataStatement", MolgenisFieldTypes.getType("text"));
			experiment_individualDataStatement_field.setDevaultValue("Access to individual-level data must be made to the study authors");
			experiment_individualDataStatement_field.setDescription("Individual data statement");
			experiment_individualDataStatement_field.setNillable(true);
			experiment_entity.addField(experiment_individualDataStatement_field);
			Field experiment_timeCreated_field = new Field(experiment_entity, "TimeCreated", MolgenisFieldTypes.getType("datetime"));
			experiment_timeCreated_field.setDescription("Time created");
			experiment_timeCreated_field.setNillable(false);
			experiment_entity.addField(experiment_timeCreated_field);
			Field experiment_assayedPanels_field = new Field(experiment_entity, "AssayedPanels", MolgenisFieldTypes.getType("mref"));
			experiment_assayedPanels_field.setDescription("Assayed panels");
			experiment_assayedPanels_field.setNillable(false);
			experiment_assayedPanels_field.setXRefVariables("Panel", "id",Arrays.asList(new String[]{"Identifier"}));
			experiment_entity.addField(experiment_assayedPanels_field);
			Field experiment_dataSets_field = new Field(experiment_entity, "DataSets", MolgenisFieldTypes.getType("mref"));
			experiment_dataSets_field.setDescription("DataSets that were input/output of this experiment.");
			experiment_dataSets_field.setNillable(false);
			experiment_dataSets_field.setXRefVariables("DataSet", "id",Arrays.asList(new String[]{"Identifier"}));
			experiment_entity.addField(experiment_dataSets_field);
			Field experiment_identifier_field = new Field(experiment_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			experiment_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			experiment_identifier_field.setNillable(false);
			experiment_entity.addField(experiment_identifier_field);
			Field experiment_name_field = new Field(experiment_entity, "Name", MolgenisFieldTypes.getType("string"));
			experiment_name_field.setDescription("human readible name, not necessary unique.");
			experiment_name_field.setNillable(false);
			experiment_entity.addField(experiment_name_field);
			Field experiment_id_field = new Field(experiment_entity, "id", MolgenisFieldTypes.getType("int"));
			experiment_id_field.setAuto(true);
			experiment_id_field.setDescription("automatically generated internal id, only for internal use.");
			experiment_id_field.setNillable(false);
			experiment_entity.addField(experiment_id_field);
			experiment_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			experiment_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//Submission
			Entity submission_entity = new Entity("Submission",this.getDatabase());
			submission_entity.setSystem(false);
			submission_entity.setAbstract(false);
			submission_entity.setImplements(new String[]{"Identifiable"});
			submission_entity.setDescription("");
			submission_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field submission_timeCreated_field = new Field(submission_entity, "TimeCreated", MolgenisFieldTypes.getType("datetime"));
			submission_timeCreated_field.setDescription("Time created");
			submission_timeCreated_field.setNillable(false);
			submission_entity.addField(submission_timeCreated_field);
			Field submission_study_field = new Field(submission_entity, "Study", MolgenisFieldTypes.getType("xref"));
			submission_study_field.setDescription("Study");
			submission_study_field.setNillable(false);
			submission_study_field.setXRefVariables("Study", "id",Arrays.asList(new String[]{"Identifier"}));
			submission_entity.addField(submission_study_field);
			Field submission_identifier_field = new Field(submission_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			submission_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			submission_identifier_field.setNillable(false);
			submission_entity.addField(submission_identifier_field);
			Field submission_name_field = new Field(submission_entity, "Name", MolgenisFieldTypes.getType("string"));
			submission_name_field.setDescription("human readible name, not necessary unique.");
			submission_name_field.setNillable(false);
			submission_entity.addField(submission_name_field);
			Field submission_id_field = new Field(submission_entity, "id", MolgenisFieldTypes.getType("int"));
			submission_id_field.setAuto(true);
			submission_id_field.setDescription("automatically generated internal id, only for internal use.");
			submission_id_field.setNillable(false);
			submission_entity.addField(submission_id_field);
			submission_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			submission_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//Contribution
			Entity contribution_entity = new Entity("Contribution",this.getDatabase());
			contribution_entity.setSystem(false);
			contribution_entity.setAbstract(false);
			contribution_entity.setImplements(new String[]{"Identifiable"});
			contribution_entity.setDescription("A contribution describes the part a Person has\n\t\t\t\tcontributed to a Contributable item.\n\t\t\t\n");
			contribution_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field contribution_researcher_field = new Field(contribution_entity, "Researcher", MolgenisFieldTypes.getType("xref"));
			contribution_researcher_field.setDescription("The person involved");
			contribution_researcher_field.setNillable(false);
			contribution_researcher_field.setXRefVariables("Person", "id",Arrays.asList(new String[]{"Name"}));
			contribution_entity.addField(contribution_researcher_field);
			Field contribution_submission_field = new Field(contribution_entity, "Submission", MolgenisFieldTypes.getType("xref"));
			contribution_submission_field.setDescription("The submission contributed to.");
			contribution_submission_field.setNillable(false);
			contribution_submission_field.setXRefVariables("Submission", "id",Arrays.asList(new String[]{"Identifier"}));
			contribution_entity.addField(contribution_submission_field);
			Field contribution_isSubmitter_field = new Field(contribution_entity, "IsSubmitter", MolgenisFieldTypes.getType("enum"));
			Vector<String> contribution_isSubmitter_field_enumoptions = new Vector<String>();
			contribution_isSubmitter_field_enumoptions.add("yes");
			contribution_isSubmitter_field_enumoptions.add("no");
			contribution_isSubmitter_field.setEnumOptions(contribution_isSubmitter_field_enumoptions);
			contribution_isSubmitter_field.setDescription("Submitter?");
			contribution_isSubmitter_field.setNillable(false);
			contribution_entity.addField(contribution_isSubmitter_field);
			Field contribution_isAuthor_field = new Field(contribution_entity, "IsAuthor", MolgenisFieldTypes.getType("enum"));
			Vector<String> contribution_isAuthor_field_enumoptions = new Vector<String>();
			contribution_isAuthor_field_enumoptions.add("yes");
			contribution_isAuthor_field_enumoptions.add("no");
			contribution_isAuthor_field.setEnumOptions(contribution_isAuthor_field_enumoptions);
			contribution_isAuthor_field.setDescription("Author?");
			contribution_isAuthor_field.setNillable(false);
			contribution_entity.addField(contribution_isAuthor_field);
			Field contribution_isSource_field = new Field(contribution_entity, "IsSource", MolgenisFieldTypes.getType("enum"));
			Vector<String> contribution_isSource_field_enumoptions = new Vector<String>();
			contribution_isSource_field_enumoptions.add("yes");
			contribution_isSource_field_enumoptions.add("no");
			contribution_isSource_field.setEnumOptions(contribution_isSource_field_enumoptions);
			contribution_isSource_field.setDescription("Source?");
			contribution_isSource_field.setNillable(false);
			contribution_entity.addField(contribution_isSource_field);
			Field contribution_identifier_field = new Field(contribution_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			contribution_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			contribution_identifier_field.setNillable(false);
			contribution_entity.addField(contribution_identifier_field);
			Field contribution_name_field = new Field(contribution_entity, "Name", MolgenisFieldTypes.getType("string"));
			contribution_name_field.setDescription("human readible name, not necessary unique.");
			contribution_name_field.setNillable(false);
			contribution_entity.addField(contribution_name_field);
			Field contribution_id_field = new Field(contribution_entity, "id", MolgenisFieldTypes.getType("int"));
			contribution_id_field.setAuto(true);
			contribution_id_field.setDescription("automatically generated internal id, only for internal use.");
			contribution_id_field.setNillable(false);
			contribution_entity.addField(contribution_id_field);
			contribution_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			contribution_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//StudyDetails
			Entity studyDetails_entity = new Entity("StudyDetails",this.getDatabase());
			studyDetails_entity.setSystem(false);
			studyDetails_entity.setAbstract(false);
			studyDetails_entity.setImplements(new String[]{"Autoid"});
			studyDetails_entity.setDescription("");
			studyDetails_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field studyDetails_study_field = new Field(studyDetails_entity, "Study", MolgenisFieldTypes.getType("xref"));
			studyDetails_study_field.setDescription("Study");
			studyDetails_study_field.setNillable(false);
			studyDetails_study_field.setXRefVariables("Study", "id",Arrays.asList(new String[]{"Identifier"}));
			studyDetails_entity.addField(studyDetails_study_field);
			Field studyDetails_title_field = new Field(studyDetails_entity, "Title", MolgenisFieldTypes.getType("text"));
			studyDetails_title_field.setDescription("Nice title of the paper");
			studyDetails_title_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_title_field);
			Field studyDetails_shortName_field = new Field(studyDetails_entity, "ShortName", MolgenisFieldTypes.getType("text"));
			studyDetails_shortName_field.setDescription("Shorthand name for layout");
			studyDetails_shortName_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_shortName_field);
			Field studyDetails_studyAbstract_field = new Field(studyDetails_entity, "StudyAbstract", MolgenisFieldTypes.getType("text"));
			studyDetails_studyAbstract_field.setDescription("Abstract");
			studyDetails_studyAbstract_field.setNillable(false);
			studyDetails_entity.addField(studyDetails_studyAbstract_field);
			Field studyDetails_version_field = new Field(studyDetails_entity, "Version", MolgenisFieldTypes.getType("string"));
			studyDetails_version_field.setDescription("Accession version");
			studyDetails_version_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_version_field);
			Field studyDetails_background_field = new Field(studyDetails_entity, "Background", MolgenisFieldTypes.getType("text"));
			studyDetails_background_field.setDescription("Short piece of information describing why the study is taking place, e.g. risk factors for a population");
			studyDetails_background_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_background_field);
			Field studyDetails_objectives_field = new Field(studyDetails_entity, "Objectives", MolgenisFieldTypes.getType("text"));
			studyDetails_objectives_field.setDescription("What this study aims to achieve");
			studyDetails_objectives_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_objectives_field);
			Field studyDetails_keyResults_field = new Field(studyDetails_entity, "KeyResults", MolgenisFieldTypes.getType("text"));
			studyDetails_keyResults_field.setDescription("Noticable results from this study");
			studyDetails_keyResults_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_keyResults_field);
			Field studyDetails_conclusions_field = new Field(studyDetails_entity, "Conclusions", MolgenisFieldTypes.getType("text"));
			studyDetails_conclusions_field.setDescription("Description of the conclusions drawn");
			studyDetails_conclusions_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_conclusions_field);
			Field studyDetails_studyDesign_field = new Field(studyDetails_entity, "StudyDesign", MolgenisFieldTypes.getType("text"));
			studyDetails_studyDesign_field.setDescription("Study design");
			studyDetails_studyDesign_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_studyDesign_field);
			Field studyDetails_studySizeReason_field = new Field(studyDetails_entity, "StudySizeReason", MolgenisFieldTypes.getType("text"));
			studyDetails_studySizeReason_field.setDescription("Reason for study size");
			studyDetails_studySizeReason_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_studySizeReason_field);
			Field studyDetails_studyPower_field = new Field(studyDetails_entity, "StudyPower", MolgenisFieldTypes.getType("text"));
			studyDetails_studyPower_field.setDescription("Study power");
			studyDetails_studyPower_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_studyPower_field);
			Field studyDetails_sourcesOfBias_field = new Field(studyDetails_entity, "SourcesOfBias", MolgenisFieldTypes.getType("text"));
			studyDetails_sourcesOfBias_field.setDescription("Sources of bias");
			studyDetails_sourcesOfBias_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_sourcesOfBias_field);
			Field studyDetails_limitations_field = new Field(studyDetails_entity, "Limitations", MolgenisFieldTypes.getType("text"));
			studyDetails_limitations_field.setDescription("Limitations");
			studyDetails_limitations_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_limitations_field);
			Field studyDetails_acknowledgements_field = new Field(studyDetails_entity, "Acknowledgements", MolgenisFieldTypes.getType("text"));
			studyDetails_acknowledgements_field.setDescription("Acknowledgements");
			studyDetails_acknowledgements_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_acknowledgements_field);
			Field studyDetails_primaryCitation_field = new Field(studyDetails_entity, "primaryCitation", MolgenisFieldTypes.getType("xref"));
			studyDetails_primaryCitation_field.setDescription("primaryCitation");
			studyDetails_primaryCitation_field.setNillable(true);
			studyDetails_primaryCitation_field.setXRefVariables("Citation", "id",Arrays.asList(new String[]{"Identifier"}));
			studyDetails_entity.addField(studyDetails_primaryCitation_field);
			Field studyDetails_otherCitations_field = new Field(studyDetails_entity, "otherCitations", MolgenisFieldTypes.getType("mref"));
			studyDetails_otherCitations_field.setDescription("Contact persons for this study");
			studyDetails_otherCitations_field.setNillable(true);
			studyDetails_otherCitations_field.setXRefVariables("Citation", "id",Arrays.asList(new String[]{"Identifier"}));
			studyDetails_entity.addField(studyDetails_otherCitations_field);
			Field studyDetails_accession_field = new Field(studyDetails_entity, "Accession", MolgenisFieldTypes.getType("hyperlink"));
			studyDetails_accession_field.setDescription("(Optional) URI or accession number to indicate source of Study. E.g. arrayexpress:M-EXP-2345");
			studyDetails_accession_field.setNillable(true);
			studyDetails_entity.addField(studyDetails_accession_field);
			Field studyDetails_id_field = new Field(studyDetails_entity, "id", MolgenisFieldTypes.getType("int"));
			studyDetails_id_field.setAuto(true);
			studyDetails_id_field.setDescription("automatically generated internal id, only for internal use.");
			studyDetails_id_field.setNillable(false);
			studyDetails_entity.addField(studyDetails_id_field);
			studyDetails_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			studyDetails_entity.addKey(Arrays.asList(new String[]{"Study"}),false,"");
			
			//PhenotypeProperty
			Entity phenotypeProperty_entity = new Entity("PhenotypeProperty",this.getDatabase());
			phenotypeProperty_entity.setSystem(false);
			phenotypeProperty_entity.setAbstract(false);
			phenotypeProperty_entity.setImplements(new String[]{"Identifiable"});
			phenotypeProperty_entity.setParents(new String[]{"ObservableFeature"});
			phenotypeProperty_entity.setDescription("");
			phenotypeProperty_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field phenotypeProperty_name_field = new Field(phenotypeProperty_entity, "Name", MolgenisFieldTypes.getType("string"));
			phenotypeProperty_name_field.setDescription("Phenotype Property");
			phenotypeProperty_name_field.setNillable(true);
			phenotypeProperty_entity.addField(phenotypeProperty_name_field);
			Field phenotypeProperty_identifier_field = new Field(phenotypeProperty_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			phenotypeProperty_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			phenotypeProperty_identifier_field.setNillable(false);
			phenotypeProperty_entity.addField(phenotypeProperty_identifier_field);
			Field phenotypeProperty_id_field = new Field(phenotypeProperty_entity, "id", MolgenisFieldTypes.getType("int"));
			phenotypeProperty_id_field.setAuto(true);
			phenotypeProperty_id_field.setDescription("automatically generated internal id, only for internal use.");
			phenotypeProperty_id_field.setNillable(false);
			phenotypeProperty_entity.addField(phenotypeProperty_id_field);
			phenotypeProperty_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			phenotypeProperty_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//PhenotypeMethod
			Entity phenotypeMethod_entity = new Entity("PhenotypeMethod",this.getDatabase());
			phenotypeMethod_entity.setSystem(false);
			phenotypeMethod_entity.setAbstract(false);
			phenotypeMethod_entity.setImplements(new String[]{"Identifiable"});
			phenotypeMethod_entity.setParents(new String[]{"DataSet"});
			phenotypeMethod_entity.setDescription("");
			phenotypeMethod_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field phenotypeMethod_studyID_field = new Field(phenotypeMethod_entity, "StudyID", MolgenisFieldTypes.getType("xref"));
			phenotypeMethod_studyID_field.setDescription("Points to study that this method came in");
			phenotypeMethod_studyID_field.setNillable(false);
			phenotypeMethod_studyID_field.setXRefVariables("Study", "id",Arrays.asList(new String[]{"Identifier"}));
			phenotypeMethod_entity.addField(phenotypeMethod_studyID_field);
			Field phenotypeMethod_phenotypePropertyID_field = new Field(phenotypeMethod_entity, "PhenotypePropertyID", MolgenisFieldTypes.getType("xref"));
			phenotypeMethod_phenotypePropertyID_field.setDescription("Phenotype property name");
			phenotypeMethod_phenotypePropertyID_field.setNillable(false);
			phenotypeMethod_phenotypePropertyID_field.setXRefVariables("PhenotypeProperty", "id",Arrays.asList(new String[]{"Identifier"}));
			phenotypeMethod_entity.addField(phenotypeMethod_phenotypePropertyID_field);
			Field phenotypeMethod_name_field = new Field(phenotypeMethod_entity, "Name", MolgenisFieldTypes.getType("string"));
			phenotypeMethod_name_field.setDescription("Name");
			phenotypeMethod_name_field.setNillable(true);
			phenotypeMethod_entity.addField(phenotypeMethod_name_field);
			Field phenotypeMethod_sample_field = new Field(phenotypeMethod_entity, "Sample", MolgenisFieldTypes.getType("string"));
			phenotypeMethod_sample_field.setDescription("Biological system or sample type being assessed");
			phenotypeMethod_sample_field.setNillable(true);
			phenotypeMethod_entity.addField(phenotypeMethod_sample_field);
			Field phenotypeMethod_identifier_field = new Field(phenotypeMethod_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			phenotypeMethod_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			phenotypeMethod_identifier_field.setNillable(false);
			phenotypeMethod_entity.addField(phenotypeMethod_identifier_field);
			Field phenotypeMethod_id_field = new Field(phenotypeMethod_entity, "id", MolgenisFieldTypes.getType("int"));
			phenotypeMethod_id_field.setAuto(true);
			phenotypeMethod_id_field.setDescription("automatically generated internal id, only for internal use.");
			phenotypeMethod_id_field.setNillable(false);
			phenotypeMethod_entity.addField(phenotypeMethod_id_field);
			phenotypeMethod_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			phenotypeMethod_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//SamplePanel
			Entity samplePanel_entity = new Entity("SamplePanel",this.getDatabase());
			samplePanel_entity.setSystem(false);
			samplePanel_entity.setAbstract(false);
			samplePanel_entity.setImplements(new String[]{"Identifiable"});
			samplePanel_entity.setParents(new String[]{"Panel"});
			samplePanel_entity.setDescription("");
			samplePanel_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field samplePanel_centralIdentifier_field = new Field(samplePanel_entity, "CentralIdentifier", MolgenisFieldTypes.getType("xref"));
			samplePanel_centralIdentifier_field.setDescription("The central GWAS identifier for this panel");
			samplePanel_centralIdentifier_field.setNillable(true);
			samplePanel_centralIdentifier_field.setXRefVariables("OntologyTerm", "id",Arrays.asList(new String[]{"Identifier"}));
			samplePanel_entity.addField(samplePanel_centralIdentifier_field);
			Field samplePanel_name_field = new Field(samplePanel_entity, "Name", MolgenisFieldTypes.getType("string"));
			samplePanel_name_field.setDescription("Name");
			samplePanel_name_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_name_field);
			Field samplePanel_label_field = new Field(samplePanel_entity, "Label", MolgenisFieldTypes.getType("string"));
			samplePanel_label_field.setDescription("Label");
			samplePanel_label_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_label_field);
			Field samplePanel_accession_field = new Field(samplePanel_entity, "Accession", MolgenisFieldTypes.getType("string"));
			samplePanel_accession_field.setDescription("Accession");
			samplePanel_accession_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_accession_field);
			Field samplePanel_accessionVersion_field = new Field(samplePanel_entity, "AccessionVersion", MolgenisFieldTypes.getType("string"));
			samplePanel_accessionVersion_field.setDescription("Accession version");
			samplePanel_accessionVersion_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_accessionVersion_field);
			Field samplePanel_description_field = new Field(samplePanel_entity, "Description", MolgenisFieldTypes.getType("text"));
			samplePanel_description_field.setDescription("Description");
			samplePanel_description_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_description_field);
			Field samplePanel_composition_field = new Field(samplePanel_entity, "Composition", MolgenisFieldTypes.getType("text"));
			samplePanel_composition_field.setDescription("Composition");
			samplePanel_composition_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_composition_field);
			Field samplePanel_totalNumberOfIndividuals_field = new Field(samplePanel_entity, "TotalNumberOfIndividuals", MolgenisFieldTypes.getType("int"));
			samplePanel_totalNumberOfIndividuals_field.setDescription("*...but required for association datasets");
			samplePanel_totalNumberOfIndividuals_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_totalNumberOfIndividuals_field);
			Field samplePanel_numberOfSexMale_field = new Field(samplePanel_entity, "NumberOfSexMale", MolgenisFieldTypes.getType("int"));
			samplePanel_numberOfSexMale_field.setDescription("Number of males");
			samplePanel_numberOfSexMale_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_numberOfSexMale_field);
			Field samplePanel_numberOfSexFemale_field = new Field(samplePanel_entity, "NumberOfSexFemale", MolgenisFieldTypes.getType("int"));
			samplePanel_numberOfSexFemale_field.setDescription("Number of females");
			samplePanel_numberOfSexFemale_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_numberOfSexFemale_field);
			Field samplePanel_numberOfSexUnknown_field = new Field(samplePanel_entity, "NumberOfSexUnknown", MolgenisFieldTypes.getType("int"));
			samplePanel_numberOfSexUnknown_field.setDescription("Number of unknown sex");
			samplePanel_numberOfSexUnknown_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_numberOfSexUnknown_field);
			Field samplePanel_numberOfProbands_field = new Field(samplePanel_entity, "NumberOfProbands", MolgenisFieldTypes.getType("int"));
			samplePanel_numberOfProbands_field.setDescription("field used only if Composition = 'Trios'");
			samplePanel_numberOfProbands_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_numberOfProbands_field);
			Field samplePanel_numberOfParents_field = new Field(samplePanel_entity, "NumberOfParents", MolgenisFieldTypes.getType("int"));
			samplePanel_numberOfParents_field.setDescription("field used only if Composition = 'Trios'");
			samplePanel_numberOfParents_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_numberOfParents_field);
			Field samplePanel_modeOfRecruitment_field = new Field(samplePanel_entity, "ModeOfRecruitment", MolgenisFieldTypes.getType("string"));
			samplePanel_modeOfRecruitment_field.setDescription("Mode of recruitment");
			samplePanel_modeOfRecruitment_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_modeOfRecruitment_field);
			Field samplePanel_diagnosisAgeRange_field = new Field(samplePanel_entity, "DiagnosisAgeRange", MolgenisFieldTypes.getType("string"));
			samplePanel_diagnosisAgeRange_field.setDescription("Diagnosis age range");
			samplePanel_diagnosisAgeRange_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_diagnosisAgeRange_field);
			Field samplePanel_diagnosisPeriod_field = new Field(samplePanel_entity, "DiagnosisPeriod", MolgenisFieldTypes.getType("string"));
			samplePanel_diagnosisPeriod_field.setDescription("Diagnosis period");
			samplePanel_diagnosisPeriod_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_diagnosisPeriod_field);
			Field samplePanel_samplingAgeRange_field = new Field(samplePanel_entity, "SamplingAgeRange", MolgenisFieldTypes.getType("string"));
			samplePanel_samplingAgeRange_field.setDescription("Sampling age range");
			samplePanel_samplingAgeRange_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_samplingAgeRange_field);
			Field samplePanel_samplingPeriod_field = new Field(samplePanel_entity, "SamplingPeriod", MolgenisFieldTypes.getType("string"));
			samplePanel_samplingPeriod_field.setDescription("Sampling period");
			samplePanel_samplingPeriod_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_samplingPeriod_field);
			Field samplePanel_populationInfo_field = new Field(samplePanel_entity, "PopulationInfo", MolgenisFieldTypes.getType("string"));
			samplePanel_populationInfo_field.setDescription("Population information");
			samplePanel_populationInfo_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_populationInfo_field);
			Field samplePanel_geographicRegionInfo_field = new Field(samplePanel_entity, "GeographicRegionInfo", MolgenisFieldTypes.getType("string"));
			samplePanel_geographicRegionInfo_field.setDescription("Geographic region information");
			samplePanel_geographicRegionInfo_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_geographicRegionInfo_field);
			Field samplePanel_ethnicityInfo_field = new Field(samplePanel_entity, "EthnicityInfo", MolgenisFieldTypes.getType("string"));
			samplePanel_ethnicityInfo_field.setDescription("Ethnicity information");
			samplePanel_ethnicityInfo_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_ethnicityInfo_field);
			Field samplePanel_birthPlaceInfo_field = new Field(samplePanel_entity, "BirthPlaceInfo", MolgenisFieldTypes.getType("string"));
			samplePanel_birthPlaceInfo_field.setDescription("Birth place information");
			samplePanel_birthPlaceInfo_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_birthPlaceInfo_field);
			Field samplePanel_admixtureInfo_field = new Field(samplePanel_entity, "AdmixtureInfo", MolgenisFieldTypes.getType("string"));
			samplePanel_admixtureInfo_field.setDescription("Admixture information");
			samplePanel_admixtureInfo_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_admixtureInfo_field);
			Field samplePanel_environmentInfo_field = new Field(samplePanel_entity, "EnvironmentInfo", MolgenisFieldTypes.getType("text"));
			samplePanel_environmentInfo_field.setDescription("Environment information");
			samplePanel_environmentInfo_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_environmentInfo_field);
			Field samplePanel_sourceOfDNA_field = new Field(samplePanel_entity, "SourceOfDNA", MolgenisFieldTypes.getType("string"));
			samplePanel_sourceOfDNA_field.setDescription("In (SELECT [SourceOfDNA] FROM [Sampleset_SourceOfDNAList];)");
			samplePanel_sourceOfDNA_field.setNillable(true);
			samplePanel_entity.addField(samplePanel_sourceOfDNA_field);
			Field samplePanel_dNAsArePooled_field = new Field(samplePanel_entity, "DNAsArePooled", MolgenisFieldTypes.getType("enum"));
			Vector<String> samplePanel_dNAsArePooled_field_enumoptions = new Vector<String>();
			samplePanel_dNAsArePooled_field_enumoptions.add("Undefined");
			samplePanel_dNAsArePooled_field_enumoptions.add("Pre-prep");
			samplePanel_dNAsArePooled_field_enumoptions.add("Post-prep");
			samplePanel_dNAsArePooled_field_enumoptions.add("No");
			samplePanel_dNAsArePooled_field.setEnumOptions(samplePanel_dNAsArePooled_field_enumoptions);
			samplePanel_dNAsArePooled_field.setDevaultValue("Undefined");
			samplePanel_dNAsArePooled_field.setDescription("Are DNAs pooled?");
			samplePanel_dNAsArePooled_field.setNillable(false);
			samplePanel_entity.addField(samplePanel_dNAsArePooled_field);
			Field samplePanel_dNAsAreWGA_field = new Field(samplePanel_entity, "DNAsAreWGA", MolgenisFieldTypes.getType("enum"));
			Vector<String> samplePanel_dNAsAreWGA_field_enumoptions = new Vector<String>();
			samplePanel_dNAsAreWGA_field_enumoptions.add("Undefined");
			samplePanel_dNAsAreWGA_field_enumoptions.add("None");
			samplePanel_dNAsAreWGA_field_enumoptions.add("All");
			samplePanel_dNAsAreWGA_field_enumoptions.add("Some");
			samplePanel_dNAsAreWGA_field.setEnumOptions(samplePanel_dNAsAreWGA_field_enumoptions);
			samplePanel_dNAsAreWGA_field.setDevaultValue("Undefined");
			samplePanel_dNAsAreWGA_field.setDescription("Are DNAs WGA?");
			samplePanel_dNAsAreWGA_field.setNillable(false);
			samplePanel_entity.addField(samplePanel_dNAsAreWGA_field);
			Field samplePanel_identifier_field = new Field(samplePanel_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			samplePanel_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			samplePanel_identifier_field.setNillable(false);
			samplePanel_entity.addField(samplePanel_identifier_field);
			Field samplePanel_id_field = new Field(samplePanel_entity, "id", MolgenisFieldTypes.getType("int"));
			samplePanel_id_field.setAuto(true);
			samplePanel_id_field.setDescription("automatically generated internal id, only for internal use.");
			samplePanel_id_field.setNillable(false);
			samplePanel_entity.addField(samplePanel_id_field);
			samplePanel_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			samplePanel_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//AssayedPanel
			Entity assayedPanel_entity = new Entity("AssayedPanel",this.getDatabase());
			assayedPanel_entity.setSystem(false);
			assayedPanel_entity.setAbstract(false);
			assayedPanel_entity.setImplements(new String[]{"Identifiable"});
			assayedPanel_entity.setParents(new String[]{"Panel"});
			assayedPanel_entity.setDescription("");
			assayedPanel_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field assayedPanel_name_field = new Field(assayedPanel_entity, "Name", MolgenisFieldTypes.getType("string"));
			assayedPanel_name_field.setDescription("Name");
			assayedPanel_name_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_name_field);
			Field assayedPanel_description_field = new Field(assayedPanel_entity, "Description", MolgenisFieldTypes.getType("text"));
			assayedPanel_description_field.setDescription("Description");
			assayedPanel_description_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_description_field);
			Field assayedPanel_totalNumberOfIndividuals_field = new Field(assayedPanel_entity, "TotalNumberOfIndividuals", MolgenisFieldTypes.getType("int"));
			assayedPanel_totalNumberOfIndividuals_field.setDescription("*...but required for association datasets");
			assayedPanel_totalNumberOfIndividuals_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_totalNumberOfIndividuals_field);
			Field assayedPanel_numberOfSexMale_field = new Field(assayedPanel_entity, "NumberOfSexMale", MolgenisFieldTypes.getType("int"));
			assayedPanel_numberOfSexMale_field.setDescription("Number of males");
			assayedPanel_numberOfSexMale_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_numberOfSexMale_field);
			Field assayedPanel_numberOfSexFemale_field = new Field(assayedPanel_entity, "NumberOfSexFemale", MolgenisFieldTypes.getType("int"));
			assayedPanel_numberOfSexFemale_field.setDescription("Number of females");
			assayedPanel_numberOfSexFemale_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_numberOfSexFemale_field);
			Field assayedPanel_numberOfSexUnknown_field = new Field(assayedPanel_entity, "NumberOfSexUnknown", MolgenisFieldTypes.getType("int"));
			assayedPanel_numberOfSexUnknown_field.setDescription("Number of unknown sex");
			assayedPanel_numberOfSexUnknown_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_numberOfSexUnknown_field);
			Field assayedPanel_numberOfProbands_field = new Field(assayedPanel_entity, "NumberOfProbands", MolgenisFieldTypes.getType("int"));
			assayedPanel_numberOfProbands_field.setDescription("field used only if Composition = 'Trios'");
			assayedPanel_numberOfProbands_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_numberOfProbands_field);
			Field assayedPanel_numberOfParents_field = new Field(assayedPanel_entity, "NumberOfParents", MolgenisFieldTypes.getType("int"));
			assayedPanel_numberOfParents_field.setDescription("field used only if Composition = 'Trios'");
			assayedPanel_numberOfParents_field.setNillable(true);
			assayedPanel_entity.addField(assayedPanel_numberOfParents_field);
			Field assayedPanel_identifier_field = new Field(assayedPanel_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			assayedPanel_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			assayedPanel_identifier_field.setNillable(false);
			assayedPanel_entity.addField(assayedPanel_identifier_field);
			Field assayedPanel_id_field = new Field(assayedPanel_entity, "id", MolgenisFieldTypes.getType("int"));
			assayedPanel_id_field.setAuto(true);
			assayedPanel_id_field.setDescription("automatically generated internal id, only for internal use.");
			assayedPanel_id_field.setNillable(false);
			assayedPanel_entity.addField(assayedPanel_id_field);
			assayedPanel_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			assayedPanel_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//PanelSource
			Entity panelSource_entity = new Entity("PanelSource",this.getDatabase());
			panelSource_entity.setSystem(false);
			panelSource_entity.setAbstract(false);
			panelSource_entity.setImplements(new String[]{"Autoid"});
			panelSource_entity.setDescription("PanelSources is partOf Panel to define how panels are\n\t\t\t\trelated panels, founder panels,\n\t\t\t\tsuch as overlap,\n\t\t\t\tselection criteria,\n\t\t\t\tgetting assayed panel from a\n\t\t\t\tsample panel, etc.\n\t\t\t\n");
			panelSource_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field panelSource_currentPanel_field = new Field(panelSource_entity, "CurrentPanel", MolgenisFieldTypes.getType("xref"));
			panelSource_currentPanel_field.setDescription("Panel for which these sources are defined.");
			panelSource_currentPanel_field.setNillable(false);
			panelSource_currentPanel_field.setXRefVariables("Panel", "id",Arrays.asList(new String[]{"Identifier"}));
			panelSource_entity.addField(panelSource_currentPanel_field);
			Field panelSource_sourcePanel_field = new Field(panelSource_entity, "SourcePanel", MolgenisFieldTypes.getType("xref"));
			panelSource_sourcePanel_field.setDescription("Source that contributed individuals to current panel");
			panelSource_sourcePanel_field.setNillable(false);
			panelSource_sourcePanel_field.setXRefVariables("Panel", "id",Arrays.asList(new String[]{"Identifier"}));
			panelSource_entity.addField(panelSource_sourcePanel_field);
			Field panelSource_numberOfIndividuals_field = new Field(panelSource_entity, "NumberOfIndividuals", MolgenisFieldTypes.getType("int"));
			panelSource_numberOfIndividuals_field.setDescription("Number of individuals lifted over from this source");
			panelSource_numberOfIndividuals_field.setNillable(true);
			panelSource_entity.addField(panelSource_numberOfIndividuals_field);
			Field panelSource_selectionCriteria_field = new Field(panelSource_entity, "SelectionCriteria", MolgenisFieldTypes.getType("text"));
			panelSource_selectionCriteria_field.setDescription("Inclusion/exclusion criteria used to select these individuals from source into current panel");
			panelSource_selectionCriteria_field.setNillable(false);
			panelSource_entity.addField(panelSource_selectionCriteria_field);
			Field panelSource_id_field = new Field(panelSource_entity, "id", MolgenisFieldTypes.getType("int"));
			panelSource_id_field.setAuto(true);
			panelSource_id_field.setDescription("automatically generated internal id, only for internal use.");
			panelSource_id_field.setNillable(false);
			panelSource_entity.addField(panelSource_id_field);
			panelSource_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//GWASExperiment
			Entity gWASExperiment_entity = new Entity("GWASExperiment",this.getDatabase());
			gWASExperiment_entity.setSystem(false);
			gWASExperiment_entity.setAbstract(false);
			gWASExperiment_entity.setImplements(new String[]{"Identifiable"});
			gWASExperiment_entity.setParents(new String[]{"Experiment"});
			gWASExperiment_entity.setDescription("");
			gWASExperiment_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field gWASExperiment_individualDataStatement_field = new Field(gWASExperiment_entity, "IndividualDataStatement", MolgenisFieldTypes.getType("text"));
			gWASExperiment_individualDataStatement_field.setDevaultValue("Access to individual-level data must be made to the study authors");
			gWASExperiment_individualDataStatement_field.setDescription("Individual data statement");
			gWASExperiment_individualDataStatement_field.setNillable(true);
			gWASExperiment_entity.addField(gWASExperiment_individualDataStatement_field);
			Field gWASExperiment_totalMarkersTested_field = new Field(gWASExperiment_entity, "TotalMarkersTested", MolgenisFieldTypes.getType("int"));
			gWASExperiment_totalMarkersTested_field.setDescription("Total markers tested");
			gWASExperiment_totalMarkersTested_field.setNillable(true);
			gWASExperiment_entity.addField(gWASExperiment_totalMarkersTested_field);
			Field gWASExperiment_totalMarkersImported_field = new Field(gWASExperiment_entity, "TotalMarkersImported", MolgenisFieldTypes.getType("int"));
			gWASExperiment_totalMarkersImported_field.setDescription("Total markers imported");
			gWASExperiment_totalMarkersImported_field.setNillable(true);
			gWASExperiment_entity.addField(gWASExperiment_totalMarkersImported_field);
			Field gWASExperiment_identifier_field = new Field(gWASExperiment_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			gWASExperiment_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			gWASExperiment_identifier_field.setNillable(false);
			gWASExperiment_entity.addField(gWASExperiment_identifier_field);
			Field gWASExperiment_name_field = new Field(gWASExperiment_entity, "Name", MolgenisFieldTypes.getType("string"));
			gWASExperiment_name_field.setDescription("human readible name, not necessary unique.");
			gWASExperiment_name_field.setNillable(false);
			gWASExperiment_entity.addField(gWASExperiment_name_field);
			Field gWASExperiment_id_field = new Field(gWASExperiment_entity, "id", MolgenisFieldTypes.getType("int"));
			gWASExperiment_id_field.setAuto(true);
			gWASExperiment_id_field.setDescription("automatically generated internal id, only for internal use.");
			gWASExperiment_id_field.setNillable(false);
			gWASExperiment_entity.addField(gWASExperiment_id_field);
			gWASExperiment_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			gWASExperiment_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			//UsedMarkerSet
			Entity usedMarkerSet_entity = new Entity("UsedMarkerSet",this.getDatabase());
			usedMarkerSet_entity.setSystem(false);
			usedMarkerSet_entity.setAbstract(false);
			usedMarkerSet_entity.setParents(new String[]{"ObservableFeature"});
			usedMarkerSet_entity.setDescription("");
			usedMarkerSet_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field usedMarkerSet_experimentID_field = new Field(usedMarkerSet_entity, "ExperimentID", MolgenisFieldTypes.getType("xref"));
			usedMarkerSet_experimentID_field.setDescription("Experiment ID");
			usedMarkerSet_experimentID_field.setNillable(true);
			usedMarkerSet_experimentID_field.setXRefVariables("Experiment", "id",Arrays.asList(new String[]{"Identifier"}));
			usedMarkerSet_entity.addField(usedMarkerSet_experimentID_field);
			Field usedMarkerSet_markerIdentifier_field = new Field(usedMarkerSet_entity, "MarkerIdentifier", MolgenisFieldTypes.getType("string"));
			usedMarkerSet_markerIdentifier_field.setDescription("Marker identifier");
			usedMarkerSet_markerIdentifier_field.setNillable(true);
			usedMarkerSet_entity.addField(usedMarkerSet_markerIdentifier_field);
			Field usedMarkerSet_id_field = new Field(usedMarkerSet_entity, "id", MolgenisFieldTypes.getType("int"));
			usedMarkerSet_id_field.setAuto(true);
			usedMarkerSet_id_field.setDescription("automatically generated internal id, only for internal use.");
			usedMarkerSet_id_field.setNillable(false);
			usedMarkerSet_entity.addField(usedMarkerSet_id_field);
			usedMarkerSet_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			usedMarkerSet_entity.addKey(Arrays.asList(new String[]{"ExperimentID","MarkerIdentifier"}),false,"");
			
			//Category
			Entity category_entity = new Entity("Category",this.getDatabase());
			category_entity.setSystem(false);
			category_entity.setAbstract(false);
			category_entity.setParents(new String[]{"Characteristic"});
			category_entity.setDescription("Category is partOf ObservableFeature to define\n\t\t\t\tcategories for an\n\t\t\t\tObservableFeature, such as the categorical\n\t\t\t\tanswer codes that are often used in Questionaires. \n\t\t\t\tFor example the ObservableFeature 'sex' has\n\t\t\t\t{code_string = 1, label=male} and {code_string\n\t\t\t\t= 2, label=female}.\n\t\t\t\tCategory can be linked to well-defined\n\t\t\t\tontology terms via the\n\t\t\t\tontologyReference. Category\n\t\t\t\textends\n\t\t\t\tObservationElement such that it\n\t\t\t\tcan be referenced by\n\t\t\t\tObservedValue.value.\n\t\t\t\tThe Category class maps to\n\t\t\t\tMETABASE::Category\n\t\t\t\n");
			category_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field category_observableFeature_field = new Field(category_entity, "observableFeature", MolgenisFieldTypes.getType("xref"));
			category_observableFeature_field.setDescription("The Measurement these permitted values are part of.");
			category_observableFeature_field.setNillable(false);
			category_observableFeature_field.setXRefVariables("ObservableFeature", "id",Arrays.asList(new String[]{"Identifier"}));
			category_entity.addField(category_observableFeature_field);
			Field category_valueCode_field = new Field(category_entity, "valueCode", MolgenisFieldTypes.getType("string"));
			category_valueCode_field.setDescription("The value used to store this category in ObservedValue. For example '1', '2'.");
			category_valueCode_field.setNillable(false);
			category_entity.addField(category_valueCode_field);
			Field category_isMissing_field = new Field(category_entity, "isMissing", MolgenisFieldTypes.getType("bool"));
			category_isMissing_field.setDevaultValue("false");
			category_isMissing_field.setDescription("whether this value should be treated as missing value.");
			category_isMissing_field.setNillable(false);
			category_entity.addField(category_isMissing_field);
			Field category_id_field = new Field(category_entity, "id", MolgenisFieldTypes.getType("int"));
			category_id_field.setAuto(true);
			category_id_field.setDescription("automatically generated internal id, only for internal use.");
			category_id_field.setNillable(false);
			category_entity.addField(category_id_field);
			category_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//Significance
			Entity significance_entity = new Entity("Significance",this.getDatabase());
			significance_entity.setSystem(false);
			significance_entity.setAbstract(false);
			significance_entity.setImplements(new String[]{"Autoid"});
			significance_entity.setParents(new String[]{"DataSet"});
			significance_entity.setDescription("");
			significance_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field significance_usedmarkersetID_field = new Field(significance_entity, "UsedmarkersetID", MolgenisFieldTypes.getType("xref"));
			significance_usedmarkersetID_field.setDescription("Used marker set ID");
			significance_usedmarkersetID_field.setNillable(false);
			significance_usedmarkersetID_field.setXRefVariables("UsedMarkerSet", "id",Arrays.asList(new String[]{"Identifier"}));
			significance_entity.addField(significance_usedmarkersetID_field);
			Field significance_negLogPValue_field = new Field(significance_entity, "NegLogPValue", MolgenisFieldTypes.getType("decimal"));
			significance_negLogPValue_field.setDescription("Negative log p-value");
			significance_negLogPValue_field.setNillable(true);
			significance_entity.addField(significance_negLogPValue_field);
			Field significance_unadjustedPValue_field = new Field(significance_entity, "UnadjustedPValue", MolgenisFieldTypes.getType("text"));
			significance_unadjustedPValue_field.setDescription("Unadjusted p-value");
			significance_unadjustedPValue_field.setNillable(true);
			significance_entity.addField(significance_unadjustedPValue_field);
			Field significance_adjustedPValue_field = new Field(significance_entity, "AdjustedPValue", MolgenisFieldTypes.getType("decimal"));
			significance_adjustedPValue_field.setDescription("Adjusted p-value");
			significance_adjustedPValue_field.setNillable(true);
			significance_entity.addField(significance_adjustedPValue_field);
			Field significance_id_field = new Field(significance_entity, "id", MolgenisFieldTypes.getType("int"));
			significance_id_field.setAuto(true);
			significance_id_field.setDescription("automatically generated internal id, only for internal use.");
			significance_id_field.setNillable(false);
			significance_entity.addField(significance_id_field);
			significance_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//EffectSize
			Entity effectSize_entity = new Entity("EffectSize",this.getDatabase());
			effectSize_entity.setSystem(false);
			effectSize_entity.setAbstract(false);
			effectSize_entity.setParents(new String[]{"DataSet"});
			effectSize_entity.setDescription("");
			effectSize_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field effectSize_usedMarkerSetID_field = new Field(effectSize_entity, "UsedMarkerSetID", MolgenisFieldTypes.getType("xref"));
			effectSize_usedMarkerSetID_field.setDescription("Used Marker ID");
			effectSize_usedMarkerSetID_field.setNillable(true);
			effectSize_usedMarkerSetID_field.setXRefVariables("UsedMarkerSet", "id",Arrays.asList(new String[]{"Identifier"}));
			effectSize_entity.addField(effectSize_usedMarkerSetID_field);
			Field effectSize_lower95Bound_field = new Field(effectSize_entity, "Lower95Bound", MolgenisFieldTypes.getType("decimal"));
			effectSize_lower95Bound_field.setDescription("Lower95Bound");
			effectSize_lower95Bound_field.setNillable(false);
			effectSize_entity.addField(effectSize_lower95Bound_field);
			Field effectSize_upper95Bound_field = new Field(effectSize_entity, "Upper95Bound", MolgenisFieldTypes.getType("decimal"));
			effectSize_upper95Bound_field.setDescription("Upper95Bound");
			effectSize_upper95Bound_field.setNillable(false);
			effectSize_entity.addField(effectSize_upper95Bound_field);
			Field effectSize_stdError_field = new Field(effectSize_entity, "StdError", MolgenisFieldTypes.getType("decimal"));
			effectSize_stdError_field.setDescription("StdError");
			effectSize_stdError_field.setNillable(false);
			effectSize_entity.addField(effectSize_stdError_field);
			Field effectSize_id_field = new Field(effectSize_entity, "id", MolgenisFieldTypes.getType("int"));
			effectSize_id_field.setAuto(true);
			effectSize_id_field.setDescription("automatically generated internal id, only for internal use.");
			effectSize_id_field.setNillable(false);
			effectSize_entity.addField(effectSize_id_field);
			effectSize_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//SelectionCriteria
			Entity selectionCriteria_entity = new Entity("SelectionCriteria",this.getDatabase());
			selectionCriteria_entity.setSystem(false);
			selectionCriteria_entity.setAbstract(false);
			selectionCriteria_entity.setImplements(new String[]{"Autoid"});
			selectionCriteria_entity.setDescription("Create relationships between panels, founder panels,\n\t\t\t\tsuch as overlap,\n\t\t\t\tselection criteria, getting assayed panel from a\n\t\t\t\tsample panel, etc.\n\t\t\t\n");
			selectionCriteria_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field selectionCriteria_sourcePanel_field = new Field(selectionCriteria_entity, "SourcePanel", MolgenisFieldTypes.getType("xref"));
			selectionCriteria_sourcePanel_field.setDescription("SourcePanel");
			selectionCriteria_sourcePanel_field.setNillable(false);
			selectionCriteria_sourcePanel_field.setXRefVariables("Panel", "id",Arrays.asList(new String[]{"Identifier"}));
			selectionCriteria_entity.addField(selectionCriteria_sourcePanel_field);
			Field selectionCriteria_targetPanel_field = new Field(selectionCriteria_entity, "TargetPanel", MolgenisFieldTypes.getType("xref"));
			selectionCriteria_targetPanel_field.setDescription("TargetPanel");
			selectionCriteria_targetPanel_field.setNillable(false);
			selectionCriteria_targetPanel_field.setXRefVariables("Panel", "id",Arrays.asList(new String[]{"Identifier"}));
			selectionCriteria_entity.addField(selectionCriteria_targetPanel_field);
			Field selectionCriteria_numberOfIndividuals_field = new Field(selectionCriteria_entity, "NumberOfIndividuals", MolgenisFieldTypes.getType("int"));
			selectionCriteria_numberOfIndividuals_field.setDescription("NumberOfIndividuals");
			selectionCriteria_numberOfIndividuals_field.setNillable(false);
			selectionCriteria_entity.addField(selectionCriteria_numberOfIndividuals_field);
			Field selectionCriteria_details_field = new Field(selectionCriteria_entity, "Details", MolgenisFieldTypes.getType("text"));
			selectionCriteria_details_field.setDescription("Details");
			selectionCriteria_details_field.setNillable(false);
			selectionCriteria_entity.addField(selectionCriteria_details_field);
			Field selectionCriteria_id_field = new Field(selectionCriteria_entity, "id", MolgenisFieldTypes.getType("int"));
			selectionCriteria_id_field.setAuto(true);
			selectionCriteria_id_field.setDescription("automatically generated internal id, only for internal use.");
			selectionCriteria_id_field.setNillable(false);
			selectionCriteria_entity.addField(selectionCriteria_id_field);
			selectionCriteria_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//ObservationSet
			Entity observationSet_entity = new Entity("ObservationSet",this.getDatabase());
			observationSet_entity.setSystem(false);
			observationSet_entity.setAbstract(false);
			observationSet_entity.setImplements(new String[]{"Autoid"});
			observationSet_entity.setDescription("In practice: Observation is one row within a DataSet.\n\t\t\t\n");
			observationSet_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field observationSet_partOfDataSet_field = new Field(observationSet_entity, "partOfDataSet", MolgenisFieldTypes.getType("xref"));
			observationSet_partOfDataSet_field.setDescription("DataSet this ValueSet is part of.");
			observationSet_partOfDataSet_field.setNillable(false);
			observationSet_partOfDataSet_field.setXRefVariables("DataSet", "id",Arrays.asList(new String[]{"Identifier"}));
			observationSet_entity.addField(observationSet_partOfDataSet_field);
			Field observationSet_target_field = new Field(observationSet_entity, "Target", MolgenisFieldTypes.getType("xref"));
			observationSet_target_field.setDescription("References the target for which this data was recorded. For example 'individual1'.");
			observationSet_target_field.setNillable(false);
			observationSet_target_field.setXRefVariables("Characteristic", "id",Arrays.asList(new String[]{"Identifier"}));
			observationSet_entity.addField(observationSet_target_field);
			Field observationSet_time_field = new Field(observationSet_entity, "Time", MolgenisFieldTypes.getType("datetime"));
			observationSet_time_field.setDescription("Time of this observationSet");
			observationSet_time_field.setNillable(true);
			observationSet_entity.addField(observationSet_time_field);
			Field observationSet_id_field = new Field(observationSet_entity, "id", MolgenisFieldTypes.getType("int"));
			observationSet_id_field.setAuto(true);
			observationSet_id_field.setDescription("automatically generated internal id, only for internal use.");
			observationSet_id_field.setNillable(false);
			observationSet_entity.addField(observationSet_id_field);
			observationSet_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			observationSet_entity.addKey(Arrays.asList(new String[]{"partOfDataSet","Target","Time"}),false,"");
			
			//ObservedValue
			Entity observedValue_entity = new Entity("ObservedValue",this.getDatabase());
			observedValue_entity.setSystem(false);
			observedValue_entity.setAbstract(false);
			observedValue_entity.setImplements(new String[]{"Autoid"});
			observedValue_entity.setDescription("\n\t\t\t\tGeneric storage of values as part of one observation\n\t\t\t\tevent. Values are atomatic observations,\n\t\t\t\te.g.,\n\t\t\t\tlength (feature) of\n\t\t\t\tindividual 1 (valueset.target)\n\t\t\t\t= 179cm (value).\n\t\t\t\tValues can also be\n\t\t\t\tqualified by some characteristic,\n\t\t\t\te.g., QTL\n\t\t\t\tp-value (feature)\n\t\t\t\tbetween\n\t\t\t\tphenotype 'leaf count'\n\t\t\t\t(characteristic) and\n\t\t\t\tmarker 'PVV4'\n\t\t\t\t(valueset.target) =\n\t\t\t\t0.1^10+3 (value).\n\t\t\t\n");
			observedValue_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field observedValue_observationSet_field = new Field(observedValue_entity, "ObservationSet", MolgenisFieldTypes.getType("xref"));
			observedValue_observationSet_field.setDescription("Reference to the observation. For example a particular patient visit or the application of a microarray or the calculation of a QTL model");
			observedValue_observationSet_field.setNillable(false);
			observedValue_observationSet_field.setXRefVariables("ObservationSet", "id",Arrays.asList(new String[]{"id"}));
			observedValue_entity.addField(observedValue_observationSet_field);
			Field observedValue_feature_field = new Field(observedValue_entity, "Feature", MolgenisFieldTypes.getType("xref"));
			observedValue_feature_field.setDescription("References the ObservableFeature that this observation was made on. For example 'probe123'.");
			observedValue_feature_field.setNillable(false);
			observedValue_feature_field.setXRefVariables("ObservableFeature", "id",Arrays.asList(new String[]{"Identifier"}));
			observedValue_entity.addField(observedValue_feature_field);
			Field observedValue_characteristic_field = new Field(observedValue_entity, "Characteristic", MolgenisFieldTypes.getType("xref"));
			observedValue_characteristic_field.setDescription("Is brother of [characteristic], or Average of [height]");
			observedValue_characteristic_field.setNillable(true);
			observedValue_characteristic_field.setXRefVariables("Characteristic", "id",Arrays.asList(new String[]{"Identifier"}));
			observedValue_entity.addField(observedValue_characteristic_field);
			Field observedValue_value_field = new Field(observedValue_entity, "Value", MolgenisFieldTypes.getType("string"));
			observedValue_value_field.setDescription("The value observed");
			observedValue_value_field.setNillable(true);
			observedValue_entity.addField(observedValue_value_field);
			Field observedValue_id_field = new Field(observedValue_entity, "id", MolgenisFieldTypes.getType("int"));
			observedValue_id_field.setAuto(true);
			observedValue_id_field.setDescription("automatically generated internal id, only for internal use.");
			observedValue_id_field.setNillable(false);
			observedValue_entity.addField(observedValue_id_field);
			observedValue_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//FrequencyCluster
			Entity frequencyCluster_entity = new Entity("FrequencyCluster",this.getDatabase());
			frequencyCluster_entity.setSystem(false);
			frequencyCluster_entity.setAbstract(false);
			frequencyCluster_entity.setParents(new String[]{"DataSet"});
			frequencyCluster_entity.setDescription("");
			frequencyCluster_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field frequencyCluster_dataSet_field = new Field(frequencyCluster_entity, "DataSet", MolgenisFieldTypes.getType("xref"));
			frequencyCluster_dataSet_field.setDescription("Result set identifier");
			frequencyCluster_dataSet_field.setNillable(true);
			frequencyCluster_dataSet_field.setXRefVariables("DataSet", "id",Arrays.asList(new String[]{"Identifier"}));
			frequencyCluster_entity.addField(frequencyCluster_dataSet_field);
			Field frequencyCluster_usedMarkerSet_field = new Field(frequencyCluster_entity, "UsedMarkerSet", MolgenisFieldTypes.getType("xref"));
			frequencyCluster_usedMarkerSet_field.setDescription("Used marker set ID");
			frequencyCluster_usedMarkerSet_field.setNillable(false);
			frequencyCluster_usedMarkerSet_field.setXRefVariables("UsedMarkerSet", "id",Arrays.asList(new String[]{"Identifier"}));
			frequencyCluster_entity.addField(frequencyCluster_usedMarkerSet_field);
			Field frequencyCluster_markerID_field = new Field(frequencyCluster_entity, "MarkerID", MolgenisFieldTypes.getType("int"));
			frequencyCluster_markerID_field.setDescription("Marker ID");
			frequencyCluster_markerID_field.setNillable(false);
			frequencyCluster_entity.addField(frequencyCluster_markerID_field);
			Field frequencyCluster_numberOfGenotypedSamples_field = new Field(frequencyCluster_entity, "NumberOfGenotypedSamples", MolgenisFieldTypes.getType("int"));
			frequencyCluster_numberOfGenotypedSamples_field.setDescription("Number of genotyped samples");
			frequencyCluster_numberOfGenotypedSamples_field.setNillable(false);
			frequencyCluster_entity.addField(frequencyCluster_numberOfGenotypedSamples_field);
			Field frequencyCluster_pValueHWE_field = new Field(frequencyCluster_entity, "PValueHWE", MolgenisFieldTypes.getType("decimal"));
			frequencyCluster_pValueHWE_field.setDescription("P-value HWE");
			frequencyCluster_pValueHWE_field.setNillable(true);
			frequencyCluster_entity.addField(frequencyCluster_pValueHWE_field);
			Field frequencyCluster_unadjustedPValue_field = new Field(frequencyCluster_entity, "UnadjustedPValue", MolgenisFieldTypes.getType("decimal"));
			frequencyCluster_unadjustedPValue_field.setDescription("Unadjusted p-value");
			frequencyCluster_unadjustedPValue_field.setNillable(true);
			frequencyCluster_entity.addField(frequencyCluster_unadjustedPValue_field);
			Field frequencyCluster_oddsRatioStatement_field = new Field(frequencyCluster_entity, "OddsRatioStatement", MolgenisFieldTypes.getType("string"));
			frequencyCluster_oddsRatioStatement_field.setDescription("Odds ratio statement");
			frequencyCluster_oddsRatioStatement_field.setNillable(true);
			frequencyCluster_entity.addField(frequencyCluster_oddsRatioStatement_field);
			Field frequencyCluster_attributableRiskStatement_field = new Field(frequencyCluster_entity, "AttributableRiskStatement", MolgenisFieldTypes.getType("string"));
			frequencyCluster_attributableRiskStatement_field.setDescription("Attributable risk statement");
			frequencyCluster_attributableRiskStatement_field.setNillable(true);
			frequencyCluster_entity.addField(frequencyCluster_attributableRiskStatement_field);
			Field frequencyCluster_id_field = new Field(frequencyCluster_entity, "id", MolgenisFieldTypes.getType("int"));
			frequencyCluster_id_field.setAuto(true);
			frequencyCluster_id_field.setDescription("automatically generated internal id, only for internal use.");
			frequencyCluster_id_field.setNillable(false);
			frequencyCluster_entity.addField(frequencyCluster_id_field);
			frequencyCluster_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//GenotypeFrequency
			Entity genotypeFrequency_entity = new Entity("GenotypeFrequency",this.getDatabase());
			genotypeFrequency_entity.setSystem(false);
			genotypeFrequency_entity.setAbstract(false);
			genotypeFrequency_entity.setParents(new String[]{"DataSet"});
			genotypeFrequency_entity.setDescription("");
			genotypeFrequency_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field genotypeFrequency_frequencyCluster_field = new Field(genotypeFrequency_entity, "FrequencyCluster", MolgenisFieldTypes.getType("xref"));
			genotypeFrequency_frequencyCluster_field.setDescription("Frequency cluster ID");
			genotypeFrequency_frequencyCluster_field.setNillable(true);
			genotypeFrequency_frequencyCluster_field.setXRefVariables("FrequencyCluster", "id",Arrays.asList(new String[]{"Identifier"}));
			genotypeFrequency_entity.addField(genotypeFrequency_frequencyCluster_field);
			Field genotypeFrequency_genotypeCombo_field = new Field(genotypeFrequency_entity, "GenotypeCombo", MolgenisFieldTypes.getType("text"));
			genotypeFrequency_genotypeCombo_field.setDescription("Genotype combo");
			genotypeFrequency_genotypeCombo_field.setNillable(true);
			genotypeFrequency_entity.addField(genotypeFrequency_genotypeCombo_field);
			Field genotypeFrequency_frequencyAsProportion_field = new Field(genotypeFrequency_entity, "FrequencyAsProportion", MolgenisFieldTypes.getType("decimal"));
			genotypeFrequency_frequencyAsProportion_field.setDescription("Frequency as proportion");
			genotypeFrequency_frequencyAsProportion_field.setNillable(false);
			genotypeFrequency_entity.addField(genotypeFrequency_frequencyAsProportion_field);
			Field genotypeFrequency_numberSamplesWithGenotype_field = new Field(genotypeFrequency_entity, "NumberSamplesWithGenotype", MolgenisFieldTypes.getType("int"));
			genotypeFrequency_numberSamplesWithGenotype_field.setDescription("Number of samples with genotype");
			genotypeFrequency_numberSamplesWithGenotype_field.setNillable(true);
			genotypeFrequency_entity.addField(genotypeFrequency_numberSamplesWithGenotype_field);
			Field genotypeFrequency_id_field = new Field(genotypeFrequency_entity, "id", MolgenisFieldTypes.getType("int"));
			genotypeFrequency_id_field.setAuto(true);
			genotypeFrequency_id_field.setDescription("automatically generated internal id, only for internal use.");
			genotypeFrequency_id_field.setNillable(false);
			genotypeFrequency_entity.addField(genotypeFrequency_id_field);
			genotypeFrequency_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//AlleleFrequency
			Entity alleleFrequency_entity = new Entity("AlleleFrequency",this.getDatabase());
			alleleFrequency_entity.setSystem(false);
			alleleFrequency_entity.setAbstract(false);
			alleleFrequency_entity.setParents(new String[]{"DataSet"});
			alleleFrequency_entity.setDescription("");
			alleleFrequency_entity.setXrefLabels(Arrays.asList(new String[]{"Identifier"}));
			Field alleleFrequency_frequencyCluster_field = new Field(alleleFrequency_entity, "FrequencyCluster", MolgenisFieldTypes.getType("xref"));
			alleleFrequency_frequencyCluster_field.setDescription("Frequency cluster ID");
			alleleFrequency_frequencyCluster_field.setNillable(true);
			alleleFrequency_frequencyCluster_field.setXRefVariables("FrequencyCluster", "id",Arrays.asList(new String[]{"Identifier"}));
			alleleFrequency_entity.addField(alleleFrequency_frequencyCluster_field);
			Field alleleFrequency_alleleCombo_field = new Field(alleleFrequency_entity, "AlleleCombo", MolgenisFieldTypes.getType("text"));
			alleleFrequency_alleleCombo_field.setDescription("Allele combo");
			alleleFrequency_alleleCombo_field.setNillable(true);
			alleleFrequency_entity.addField(alleleFrequency_alleleCombo_field);
			Field alleleFrequency_frequencyAsProportion_field = new Field(alleleFrequency_entity, "FrequencyAsProportion", MolgenisFieldTypes.getType("decimal"));
			alleleFrequency_frequencyAsProportion_field.setDescription("Frequency as proportion");
			alleleFrequency_frequencyAsProportion_field.setNillable(false);
			alleleFrequency_entity.addField(alleleFrequency_frequencyAsProportion_field);
			Field alleleFrequency_id_field = new Field(alleleFrequency_entity, "id", MolgenisFieldTypes.getType("int"));
			alleleFrequency_id_field.setAuto(true);
			alleleFrequency_id_field.setDescription("automatically generated internal id, only for internal use.");
			alleleFrequency_id_field.setNillable(false);
			alleleFrequency_entity.addField(alleleFrequency_id_field);
			alleleFrequency_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			
			//PhenotypeValue
			Entity phenotypeValue_entity = new Entity("PhenotypeValue",this.getDatabase());
			phenotypeValue_entity.setSystem(false);
			phenotypeValue_entity.setAbstract(false);
			phenotypeValue_entity.setImplements(new String[]{"Identifiable"});
			phenotypeValue_entity.setParents(new String[]{"ObservedValue"});
			phenotypeValue_entity.setDescription("");
			phenotypeValue_entity.setXrefLabels(Arrays.asList(new String[]{"id"}));
			Field phenotypeValue_phenotypePropertyID_field = new Field(phenotypeValue_entity, "PhenotypePropertyID", MolgenisFieldTypes.getType("xref"));
			phenotypeValue_phenotypePropertyID_field.setDescription("Phenotype property name");
			phenotypeValue_phenotypePropertyID_field.setNillable(false);
			phenotypeValue_phenotypePropertyID_field.setXRefVariables("PhenotypeProperty", "id",Arrays.asList(new String[]{"Identifier"}));
			phenotypeValue_entity.addField(phenotypeValue_phenotypePropertyID_field);
			Field phenotypeValue_name_field = new Field(phenotypeValue_entity, "Name", MolgenisFieldTypes.getType("string"));
			phenotypeValue_name_field.setDescription("Name");
			phenotypeValue_name_field.setNillable(true);
			phenotypeValue_entity.addField(phenotypeValue_name_field);
			Field phenotypeValue_value_field = new Field(phenotypeValue_entity, "Value", MolgenisFieldTypes.getType("string"));
			phenotypeValue_value_field.setDescription("Value");
			phenotypeValue_value_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_value_field);
			Field phenotypeValue_valueRank_field = new Field(phenotypeValue_entity, "ValueRank", MolgenisFieldTypes.getType("string"));
			phenotypeValue_valueRank_field.setDescription("Value Rank");
			phenotypeValue_valueRank_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_valueRank_field);
			Field phenotypeValue_valueIsMean_field = new Field(phenotypeValue_entity, "ValueIsMean", MolgenisFieldTypes.getType("string"));
			phenotypeValue_valueIsMean_field.setDescription("Value is mean");
			phenotypeValue_valueIsMean_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_valueIsMean_field);
			Field phenotypeValue_sTD_field = new Field(phenotypeValue_entity, "STD", MolgenisFieldTypes.getType("string"));
			phenotypeValue_sTD_field.setDescription("Standard Deviation");
			phenotypeValue_sTD_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_sTD_field);
			Field phenotypeValue_min_field = new Field(phenotypeValue_entity, "Min", MolgenisFieldTypes.getType("string"));
			phenotypeValue_min_field.setDescription("Minimum value");
			phenotypeValue_min_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_min_field);
			Field phenotypeValue_max_field = new Field(phenotypeValue_entity, "Max", MolgenisFieldTypes.getType("string"));
			phenotypeValue_max_field.setDescription("Maximum value");
			phenotypeValue_max_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_max_field);
			Field phenotypeValue_identifier_field = new Field(phenotypeValue_entity, "Identifier", MolgenisFieldTypes.getType("string"));
			phenotypeValue_identifier_field.setDescription("user supplied or automatically assigned (using a decorator) unique and short identifier, e.g. MA1234");
			phenotypeValue_identifier_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_identifier_field);
			Field phenotypeValue_id_field = new Field(phenotypeValue_entity, "id", MolgenisFieldTypes.getType("int"));
			phenotypeValue_id_field.setAuto(true);
			phenotypeValue_id_field.setDescription("automatically generated internal id, only for internal use.");
			phenotypeValue_id_field.setNillable(false);
			phenotypeValue_entity.addField(phenotypeValue_id_field);
			phenotypeValue_entity.addKey(Arrays.asList(new String[]{"id"}),false,"");
			phenotypeValue_entity.addKey(Arrays.asList(new String[]{"Identifier"}),false,"");
			
			
			//disabled validation, this means above must be perfect!
			//new MolgenisModelValidator();
			//MolgenisModelValidator.validate(this, new MolgenisOptions());

		} catch (MolgenisModelException e)
		{
			throw new DatabaseException(e);
		}
	}
}